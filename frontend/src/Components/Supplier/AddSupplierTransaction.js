import React, { useEffect, useState } from "react";
import axios from "axios";
import Header from "../Admin/Header";
import AdminSideBar from "../Admin/AdminSidebar";
import Footer from "../Common/Footer";

export default function AddSupplierTransaction() {
  const [InvoiceNo, setInvoiceNo] = useState("");
  const [SuppliedDate, setSuppliedDate] = useState("");
  const [Supplier, setSupplier] = useState("");
  const [ProductName, setProductName] = useState("");
  const [Quantity, setQuantity] = useState();
  const [Amount, setAmount] = useState();
  const [inventories, setInventories] = useState([]);
  const [csrfToken, setCsrfToken] = useState("");

  useEffect(() => {
    const cachedToken = sessionStorage.getItem("csrfToken"); // Check session storage
    if (cachedToken) {
      setCsrfToken(cachedToken); // Use cached token if available
    } else {
      const fetchCsrfToken = async () => {
        try {
          const response = await axios.get("http://localhost:8070/csrf-token", {
            withCredentials: true,
          });
          const token = response.data.csrfToken;
          console.log("", token);
          setCsrfToken(token);
          sessionStorage.setItem("csrfToken", token); // Store token in session storage
        } catch (error) {
          console.error("Error fetching CSRF token:", error);
        }
      };
      fetchCsrfToken(); // Fetch the token if not cached
    }
  }, []);

  useEffect(() => {
    axios
      .get("http://localhost:8070/supplierTransaction/supplierTransaction")
      .then((res) => {
        console.log(res.data);
        setInventories(res.data);
      })
      .catch((err) => {
        alert(err.message);
      });
  }, []);

  // Helper function to validate input fields
  function validateInput(input, fieldName) {
    const maliciousCodeRegex = /<|>|script|onerror|onload|alert|&|"|'/gi; // Matches malicious patterns

    if (input === "") {
      alert(`${fieldName} cannot be empty.`);
      return false;
    }

    if (maliciousCodeRegex.test(input)) {
      alert(`Invalid characters detected in ${fieldName}.`);
      return false;
    }

    return true;
  }

  function sendData(e) {
    e.preventDefault();

    // Validate inputs
    if (
      !validateInput(InvoiceNo, "Invoice No") ||
      !validateInput(Supplier, "Supplier") ||
      !validateInput(ProductName, "Product Name")
    ) {
      return; // Stop submission if validation fails
    }

    const newSupplierTransaction = {
      InvoiceNo,
      SuppliedDate,
      Supplier,
      ProductName,
      Quantity,
      Amount,
    };

    axios
      .post(
        "http://localhost:8070/supplierTransaction/addsupplierTransaction",
        newSupplierTransaction,
        {
          headers: {
            "X-CSRF-Token": csrfToken, // Add CSRF token to headers
          },
          withCredentials: true, // Ensure credentials are sent with the request
        }
      )
      .then(() => {
        alert(`Supplier Transaction Added Successfully`);

        // Reset form fields
        setInvoiceNo("");
        setSuppliedDate("");
        setSupplier("");
        setProductName("");
        setQuantity();
        setAmount();
        window.location.replace("http://localhost:3000/supplierTransaction");
      })
      .catch((err) => {
        alert(err);
      });
  }

  // Custom onChange function to prevent spaces
  const handleInputChange = (setter) => (e) => {
    const value = e.target.value
      .replace(/[<>/"'%;()+]/g, " ")
      .replace(/\s+/g, " ");
    setter(value);
  };

  return (
    <div>
      <Header />

      <div className="containerf">
        <AdminSideBar />
        <div className="container1">
          <div className="row justify-content-center">
            <div className="col-lg-5">
              <br />
              <br />
              <br />
              <div className="card shadow-lg border-0 rounded-lg mt-5">
                <div className="card-header">
                  <h3 className="text-center font-weight-light my-4">
                    Add Supplier Transaction Details
                  </h3>
                </div>
                <div className="card-body">
                  <form onSubmit={sendData}>
                    <div className="form-floating mb-3">
                      <label htmlFor="invoiceNo">Invoice No</label>
                      <br />
                      <br />
                      <input
                        type="text"
                        className="form-control"
                        id="invoiceNo"
                        placeholder="Enter Invoice No"
                        value={InvoiceNo}
                        onChange={handleInputChange(setInvoiceNo)}
                      />
                    </div>

                    <div className="form-floating mb-3">
                      <label htmlFor="suppliedDate">Supplied Date</label>
                      <br />
                      <br />
                      <input
                        type="date"
                        className="form-control"
                        id="suppliedDate"
                        value={SuppliedDate}
                        onChange={(e) => setSuppliedDate(e.target.value)}
                      />
                    </div>

                    <div className="form-floating mb-3">
                      <label htmlFor="supplier">Supplier</label>
                      <br />
                      <br />
                      <input
                        type="text"
                        className="form-control"
                        id="supplier"
                        placeholder="Enter Supplier Name"
                        value={Supplier}
                        onChange={handleInputChange(setSupplier)}
                      />
                    </div>

                    <div className="form-floating mb-3">
                      <label htmlFor="productName">Product Name</label>
                      <br />
                      <br />
                      <input
                        type="text"
                        className="form-control"
                        id="productName"
                        placeholder="Enter Product Name"
                        value={ProductName}
                        onChange={handleInputChange(setProductName)}
                      />
                    </div>

                    <div className="form-floating mb-3">
                      <label htmlFor="quantity">Quantity</label>
                      <br />
                      <br />
                      <input
                        type="number"
                        className="form-control"
                        id="quantity"
                        placeholder="Enter Quantity"
                        value={Quantity}
                        onChange={(e) => setQuantity(e.target.value)}
                      />
                    </div>

                    <div className="form-floating mb-3">
                      <label htmlFor="amount">Amount</label>
                      <br />
                      <br />
                      <input
                        type="number"
                        className="form-control"
                        id="amount"
                        placeholder="Enter Amount"
                        value={Amount}
                        onChange={(e) => setAmount(e.target.value)}
                      />
                    </div>

                    <br />
                    <div className="d-grid">
                      <button type="submit" className="btn btn-primary">
                        Insert Data
                      </button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <Footer />
    </div>
  );
}
