import React, { useState, useEffect, useCallback } from "react";
import axios from "axios";
import Header from "../Admin/Header";
import AdminSideBar from "../Admin/AdminSidebar";
import Footer from "../Common/Footer";

export default function Analytics() {
  // Read Income---------------------------------------------------------
  const [incomeJan, setIncomeJan] = useState([]);
  var jan = 0;
  const [incomeFeb, setIncomeFeb] = useState([]);
  var feb = 0;
  const [incomeMarch, setIncomeMarch] = useState([]);
  var march = 0;
  const [incomeApril, setIncomeApril] = useState([]);
  var april = 0;
  const [incomeMay, setIncomeMay] = useState([]);
  var may = 0;
  const [incomeJune, setIncomeJune] = useState([]);
  var june = 0;
  const [incomeJuly, setIncomeJuly] = useState([]);
  var july = 0;
  const [incomeAug, setIncomeAug] = useState([]);
  var aug = 0;
  const [incomeSep, setIncomeSep] = useState([]);
  var sep = 0;
  const [incomeNov, setIncomeNov] = useState([]);
  var nov = 0;
  const [incomeOct, setIncomeOct] = useState([]);
  var oct = 0;
  const [incomeDec, setIncomeDec] = useState([]);
  var dec = 0;

  useEffect(() => {
    axios
      .get("http://localhost:8070/financeTransaction/readIncome")
      .then((response) => {
        const getType = response.data.map((item) => ({
          date: item.date,
          amount: item.amount,
        }));

        jan = 0;
        feb = 0;
        march = 0;
        april = 0;
        may = 0;
        june = 0;
        july = 0;
        aug = 0;
        sep = 0;
        oct = 0;
        nov = 0;
        dec = 0;

        getType.forEach((data) => {
          var month = data.date.substr(5, 2);

          if (month === "01") {
            jan += data.amount;
            setIncomeJan(jan);
          }
          if (month === "02") {
            feb += data.amount;
            setIncomeFeb(feb);
          }
          if (month === "03") {
            march += data.amount;
            setIncomeMarch(march);
          }
          if (month === "04") {
            april += data.amount;
            setIncomeApril(april);
          }
          if (month === "05") {
            may += data.amount;
            setIncomeMay(may);
          }
          if (month === "06") {
            june += data.amount;
            setIncomeJune(june);
          }
          if (month === "07") {
            july += data.amount;
            setIncomeJuly(july);
          }
          if (month === "08") {
            aug += data.amount;
            setIncomeAug(aug);
          }
          if (month === "09") {
            sep += data.amount;
            setIncomeSep(sep);
          }
          if (month === "10") {
            oct += data.amount;
            setIncomeOct(oct);
          }
          if (month === "11") {
            nov += data.amount;
            setIncomeNov(nov);
          }
          if (month === "12") {
            dec += data.amount;
            setIncomeDec(dec);
          }
        });
      });
  }, []);

  // Read Expense---------------------------------------------------------
  const [expenseJan, setExpenseJan] = useState([]);
  var jan = 0;
  const [expenseFeb, setExpenseFeb] = useState([]);
  var feb = 0;
  const [expenseMarch, setExpenseMarch] = useState([]);
  var march = 0;
  const [expenseApril, setExpenseApril] = useState([]);
  var april = 0;
  const [expenseMay, setExpenseMay] = useState([]);
  var may = 0;
  const [expenseJune, setExpenseJune] = useState([]);
  var june = 0;
  const [expenseJuly, setExpenseJuly] = useState([]);
  var july = 0;
  const [expenseAug, setExpenseAug] = useState([]);
  var aug = 0;
  const [expenseSep, setExpenseSep] = useState([]);
  var sep = 0;
  const [expenseNov, setExpenseNov] = useState([]);
  var nov = 0;
  const [expenseOct, setExpenseOct] = useState([]);
  var oct = 0;
  const [expenseDec, setExpenseDec] = useState([]);
  var dec = 0;

  useEffect(() => {
    axios
      .get("http://localhost:8070/financeTransaction/readExpense")
      .then((response) => {
        const getData = response.data.map((item) => ({
          date: item.date,
          amount: item.amount,
        }));

        jan = 0;
        feb = 0;
        march = 0;
        april = 0;
        may = 0;
        june = 0;
        july = 0;
        aug = 0;
        sep = 0;
        oct = 0;
        nov = 0;
        dec = 0;

        getData.forEach((data) => {
          var month = data.date.substr(5, 2);

          if (month === "01") {
            jan += data.amount;
            setExpenseJan(jan);
          }
          if (month === "02") {
            feb += data.amount;
            setExpenseFeb(feb);
          }
          if (month === "03") {
            march += data.amount;
            setExpenseMarch(march);
          }
          if (month === "04") {
            april += data.amount;
            setExpenseApril(april);
          }
          if (month === "05") {
            may += data.amount;
            setExpenseMay(may);
          }
          if (month === "06") {
            june += data.amount;
            setExpenseJune(june);
          }
          if (month === "07") {
            july += data.amount;
            setExpenseJuly(july);
          }
          if (month === "08") {
            aug += data.amount;
            setExpenseAug(aug);
          }
          if (month === "09") {
            sep += data.amount;
            setExpenseSep(sep);
          }
          if (month === "10") {
            oct += data.amount;
            setExpenseOct(oct);
          }
          if (month === "11") {
            nov += data.amount;
            setExpenseNov(nov);
          }
          if (month === "12") {
            dec += data.amount;
            setExpenseDec(dec);
          }
        });
      });
  }, []);

  // Income and Expense by categories------------------------------------------------------------
  const [order, setOrderTot] = useState([]);
  var orderTot = 0;
  const [delivery, setDeliveryTot] = useState([]);
  var deliveryTot = 0;
  const [otherIncome, setOtherIncomeTot] = useState([]);
  var otherIncometot = 0;

  const [supplier, setSupplierTot] = useState([]);
  var supplierTot = 0;
  const [salary, setSalaryTot] = useState([]);
  var salaryTot = 0;
  const [bills, setBillsTot] = useState([]);
  var billsTot = 0;
  const [otherExpense, setOtherExpenseTot] = useState([]);
  var otherExpensetot = 0;

  const [emptyIncome, setEmptyIncome] = useState([]);
  const [emptyExpense, setEmptyExpense] = useState([]);

  function PieChartData(month) {
    axios
      .get("http://localhost:8070/financeTransaction/readfinanceT")
      .then((response) => {
        const getType = response.data.map((item) => ({
          amount: item.amount,
          type: item.type,
          category: item.category,
          date: item.date,
        }));

        orderTot = 0;
        deliveryTot = 0;
        otherIncometot = 0;

        supplierTot = 0;
        salaryTot = 0;
        billsTot = 0;
        otherExpensetot = 0;

        setOrderTot(0);
        setDeliveryTot(0);
        setOtherIncomeTot(0);

        setSupplierTot(0);
        setSalaryTot(0);
        setBillsTot(0);
        setOtherExpenseTot(0);

        getType.forEach((data) => {
          const tableMonth = data.date.substr(5, 2);

          if (
            data.type === "income" &&
            !isNaN(data.amount) &&
            tableMonth === month
          ) {
            if (data.category === "Order") {
              orderTot += data.amount;
              setOrderTot(orderTot);
            }
            if (data.category === "Delivery Fee") {
              deliveryTot += data.amount;
              setDeliveryTot(deliveryTot);
            }
            if (data.category !== "Order" && data.category !== "Delivery Fee") {
              otherIncometot += data.amount;
              setOtherIncomeTot(otherIncometot);
            }
          }

          if (
            data.type === "expense" &&
            !isNaN(data.amount) &&
            tableMonth === month
          ) {
            if (data.category === "Supplier Payment") {
              supplierTot += data.amount;
              setSupplierTot(supplierTot);
            }
            if (data.category === "Salary") {
              salaryTot += data.amount;
              setSalaryTot(salaryTot);
            }
            if (data.category === "Utility Bill") {
              billsTot += data.amount;
              setBillsTot(billsTot);
            }
            if (
              data.category !== "Supplier Payment" &&
              data.category !== "Salary" &&
              data.category !== "Utility Bill"
            ) {
              otherExpensetot += data.amount;
              setOtherExpenseTot(otherExpensetot);
            }
          }
        });

        if (orderTot === 0 && deliveryTot === 0 && otherIncometot === 0) {
          setEmptyIncome(true);
        } else {
          setEmptyIncome(false);
        }

        if (
          supplierTot === 0 &&
          salaryTot === 0 &&
          billsTot === 0 &&
          otherExpensetot === 0
        ) {
          setEmptyExpense(true);
        } else {
          setEmptyExpense(false);
        }
      });
  }

  return (
    <div>
      <Header />
      <AdminSideBar />
      <div className="container">
        <h1>Finance Analytics</h1>
        {/* Content */}
      </div>
      <Footer />
    </div>
  );
}