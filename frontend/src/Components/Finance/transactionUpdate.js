import React, { useState, useEffect } from "react";
import axios from "axios";
import { useParams } from "react-router-dom";
import Header from "../Admin/Header";
import AdminSideBar from "../Admin/AdminSidebar";
import Footer from "../Common/Footer";

export default function UpdateTransaction() {
  const [newtypeshow, setNewTypeshow] = useState("");
  const [newcategoryshow, setNewCategoryshow] = useState("");
  const [newamountshow, setNewAmountshow] = useState(0);
  const [newremarkshow, setNewRemarkshow] = useState("");
  const [newdateshow, setNewDateshow] = useState("");
  const [newnameshow, setNewNameshow] = useState("");
  const [idshow, setidshow] = useState("");

  const { id } = useParams();

  useEffect(() => {
    axios
      .get(`http://localhost:8070/financeTransaction/readTByID/${id}`)
      .then((res) => {
        setNewTypeshow(res.data[0].type);
        setNewCategoryshow(res.data[0].category);
        setNewAmountshow(res.data[0].amount);
        setNewRemarkshow(res.data[0].remark);
        setNewDateshow(res.data[0].date);
        setNewNameshow(res.data[0].name);
        setidshow(res.data[0]._id);
      })
      .catch((err) => {
        console.log(err);
      });
  }, [id]);

  function validateForm() {
    if (newnameshow.trim() === "") {
      alert("Name cannot be empty");
      return false;
    }
    if (isNaN(newamountshow) || newamountshow <= 0) {
      alert("Amount should be a valid positive number");
      return false;
    }
    if (newtypeshow === "") {
      alert("Please select a valid type (Income or Expense)");
      return false;
    }
    if (newcategoryshow.trim() === "") {
      alert("Category cannot be empty");
      return false;
    }
    if (newdateshow === "") {
      alert("Please select a valid date");
      return false;
    }
    return true;
  }

  function updateData(e) {
    e.preventDefault();

    if (!validateForm()) {
      return; // Don't proceed if the validation fails
    }

    const newSupp = {
      name: newnameshow,
      type: newtypeshow,
      category: newcategoryshow,
      amount: newamountshow,
      remark: newremarkshow,
      date: newdateshow,
    };

    axios
      .put(`http://localhost:8070/financeTransaction/updateT/${id}`, newSupp)
      .then(() => {
        alert("Transaction details updated successfully");
        window.location.replace("http://localhost:3000/financeTrans");
      })
      .catch((err) => {
        alert("Error updating transaction: " + err);
      });
  }

  return (
    <div>
      <Header />
      <div className="container">
        <AdminSideBar />
        <div className="container" style={{ marginTop: "100px" }}>
          <form onSubmit={updateData}>
            <h3>Update Transaction Details</h3>

            <div className="form-group">
              <label htmlFor="Name">Name</label>
              <input
                type="text"
                className="form-control"
                id="name"
                value={newnameshow}
                onChange={(e) => setNewNameshow(e.target.value)}
              />
            </div>

            <div className="form-group">
              <label htmlFor="amount">Amount</label>
              <input
                type="text"
                className="form-control"
                id="amount"
                value={newamountshow}
                onChange={(e) => setNewAmountshow(e.target.value)}
              />
            </div>

            <div className="form-group">
              <select
                id="select"
                className="form-control"
                value={newtypeshow}
                onChange={(event) => setNewTypeshow(event.target.value)}
              >
                <option value="">--Select a type--</option>
                <option value="income">Income</option>
                <option value="expense">Expense</option>
              </select>
            </div>

            <div className="form-group">
              <label htmlFor="category">Category</label>
              <input
                type="text"
                className="form-control"
                id="category"
                value={newcategoryshow}
                onChange={(e) => setNewCategoryshow(e.target.value)}
              />
            </div>

            <div className="form-group">
              <label htmlFor="remark">Remark</label>
              <input
                type="text"
                className="form-control"
                id="remark"
                value={newremarkshow}
                onChange={(e) => setNewRemarkshow(e.target.value)}
              />
            </div>

            <div className="form-group">
              <label htmlFor="date">Date</label>
              <input
                type="date"
                className="form-control"
                id="date"
                value={newdateshow}
                onChange={(e) => setNewDateshow(e.target.value)}
              />
            </div>

            <button
              type="submit"
              className="btn btn-primary"
              style={{ marginTop: "10px" }}
            >
              Update <i className="fa fa-check"></i>
            </button>

            <a
              href="/financeTrans"
              className="btn btn-secondary"
              style={{ marginTop: "20px", marginLeft: "740px" }}
            >
              Back <i className="fa fa-reply"></i>
            </a>
          </form>
        </div>
      </div>
      <Footer />
    </div>
  );
}
