import React, { useEffect, useState } from "react";
import { Route, Navigate } from "react-router-dom";

const PrivateRoute = ({ children, allowedTypes }) => {
  const [userInfo, setUserInfo] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchUserInfo = async () => {
      try {
        const response = await fetch("http://localhost:8071/logged-user", {
          credentials: "include", // Include cookies if necessary
        });
        if (response.ok) {
          const data = await response.json();
          setUserInfo(data);
        } else {
          setUserInfo(null); // If response is not OK, consider user unauthenticated
        }
      } catch (error) {
        console.error("Failed to fetch user info:", error);
        setUserInfo(null); // Handle any fetch errors
      } finally {
        setLoading(false); // Set loading to false once the request completes
      }
    };

    fetchUserInfo();
  }, []);

  // Show a loading indicator while fetching the user info
  if (loading) {
    return <div>Loading...</div>;
  }

  // Check if the user is authenticated and is of the allowed type
  const isAuthenticated = userInfo !== null;
  const isAllowedType = allowedTypes.includes(userInfo?.type);

  return isAuthenticated && isAllowedType ? (
    children
  ) : (
    <Navigate to="/" replace /> // Redirect to home if unauthenticated or unauthorized
  );
};

export default PrivateRoute;
