const router = require("express").Router();
const SalesExecutive = require("../models/salesexecutive"); //import sales executive model
const bcrypt = require("bcrypt");
const nodemailer = require("nodemailer");
const sanitizeHtml = require("sanitize-html");
const { body, param } = require("express-validator");
const rateLimit = require("express-rate-limit");
const helmet = require("helmet");
const logger = require("../utils/logger.js");

router.use(helmet());

const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: "Too many requests from this IP, please try again later.",
});

router.use(apiLimiter);

//CREATE function - create/adding a salesexecutive

router.post(
  "/addse",
  [
    body("sid").trim().escape(),
    body("fullname").trim().escape(),
    body("email").trim().escape(),
    body("password").trim().escape(),
    body("address").trim().escape(),
    body("phone").trim().escape(),
    body("dob").trim().escape(),
    body("qualification").trim().escape(),
    body("basicsalary").trim(),
    body("gender").trim().escape(),
    body("image").trim().escape(),
  ],
  async (req, res) => {
    // get the body of the request and store the values in variables
    const sid = req.body.sid;
    const fullname = req.body.fullname;
    const email = req.body.email;
    const password = req.body.password;
    const address = req.body.address;
    const phone = Number(req.body.phone);
    const dob = req.body.dob;
    const qualification = req.body.qualification;
    const basicsalary = Number(req.body.basicsalary);
    const gender = req.body.gender;
    const image = req.body.image;
    var msg = `You are now an employee of LuxuryX. Your username is  ${sanitizeHtml(
      email
    )} and password is ${sanitizeHtml(password)}`;

    if (
      !sid ||
      !fullname ||
      !email ||
      !password ||
      !address ||
      !phone ||
      !dob ||
      !qualification ||
      !basicsalary ||
      !gender
    ) {
      return res.status(400).json({ message: "All fields are required" });
    }

    if (isNaN(phone) || phone.toString().length !== 10) {
      return res.status(400).json({ message: "Invalid phone number" });
    }

    if (isNaN(basicsalary)) {
      return res.status(400).json({ message: "Invalid basic salary" });
    }

    if (!/^\S+@\S+\.\S+$/.test(email)) {
      return res.status(400).json({ message: "Invalid email format" });
    }

    if (!/^[a-zA-Z ]+$/.test(fullname)) {
      return res
        .status(400)
        .json({ message: "Full name can only contain letters and spaces" });
    }

    try {
      const preuser = await SalesExecutive.findOne({ email: email }); //check whether the email address already exists
      const useId = await SalesExecutive.findOne({ sid: sid }); //check whether the sid already exists

      if (preuser) {
        logger.warn(`Email ${email} is already taken`);
        return res.status(400).json({ message: "Email is already taken" });
      } else if (useId) {
        res.status(200).json("Id"); //response in json format is sent to the frontend if sid is already taken
      } else {
        try {
          //send email
          const transporter = nodemailer.createTransport({
            service: "gmail",
            auth: {
              user: process.env.EMAIL,
              pass: process.env.APP_PASSWORD,
            },
          });

          const mailOptions = {
            from: process.env.EMAIL,
            to: email,
            subject: "Congratulations!",
            html: msg,
          };

          transporter.sendMail(mailOptions, (error, info) => {
            if (error) {
              logger.error("Error sending email: " + error.message);
              return res
                .status(500)
                .json({ status: 500, error: error.message });
            } else {
              logger.info("Email sent: " + info.response);
              res.status(201).json({ status: 201, newSalesExecutive, info });
            }
          });
        } catch (emailError) {
          logger.error("Error sending email: " + emailError.message);
          res.status(500).json({ status: 500, error: emailError.message });
        }
        bcrypt.hash(password, 12).then((hashedpassword) => {
          const newSalesExecutive = new SalesExecutive({
            //creating object from salesexecutive model and assigning it to a const variable
            sid,
            fullname,
            email,
            password: hashedpassword,
            address,
            phone,
            dob,
            qualification,
            basicsalary,
            gender,
            image,
          });

          newSalesExecutive.save(); //save the newly created object in the database using save function
          res.status(201).json(newSalesExecutive);
          logger.info(`Sales Executive created with SID ${sid}`); //response in json format is sent if above condition true(if object is passed)
        });
      }
    } catch (error) {
      logger.error("Error creating Sales Executive: " + error.message);
      res.status(422).json({ status: 422, error: error.message }); //catches error and send tthe error as a json object to the frontend
    }
  }
);

//READ function - fetch data of all salesexecutives

router.route("/getse").get((req, res) => {
  //get is used to retrieve data from database
  try {
    const salesExecutives = SalesExecutive.find();
    logger.info("Fetched all Sales Executives");
    res.status(200).json(salesExecutives);
  } catch (error) {
    logger.error("Error fetching Sales Executives: " + error.message);
    res.status(500).json({ status: 500, error: error.message });
  }
});

//DELETE function

router
  .route("/deletese/:id")
  .delete([param("id").trim().escape()], async (req, res) => {
    let Id = req.params.id; //get the id from the request(parameter)
    try {
      await SalesExecutive.findByIdAndDelete(Id);
      logger.info(`Sales Executive with ID ${Id} deleted successfully`);
      res.status(200).json({ message: "Success" });
    } catch (err) {
      logger.error("Error deleting Sales Executive: " + err.message);
      res
        .status(500)
        .json({
          message: "Error deleting Sales Executive",
          error: err.message,
        });
    }
  });

//Function to get the the salesexecutive details by their sid

router
  .route("/getSid/:id")
  .get([param("id").trim().escape()], async (req, res) => {
    let id = req.params.id; //get the id from the request(parameter)

    await SalesExecutive.findOne({ sid: `${id}` }) //compare the sid with the got id and return the details
      .then((se) => {
        res.status(200).send({ status: "SE Details fetched", se }); //send response as a json object and a status
      })
      .catch((err) => {
        logger.error(err.message);

        res
          .status(500)
          .send({
            status: "Error with fetching SE details",
            error: err.message,
          }); //send error message
      });
  });

//UPDATE function

router
  .route("/update/:id")
  .put(
    [
      param("id").trim().escape(),
      body("fullname").trim().escape(),
      body("email").trim().escape(),
      body("password").trim().escape(),
      body("address").trim().escape(),
      body("phone").trim().escape(),
      body("dob").trim().escape(),
      body("qualification").trim().escape(),
      body("basicsalary").trim(),
      body("gender").trim().escape(),
      body("image").trim().escape(),
    ],
    async (req, res) => {
      let Id = req.params.id; //get the id from the request(parameter)

      // get the body of the request and store the values in variables
      const {
        fullname,
        email,
        address,
        phone,
        dob,
        qualification,
        basicsalary,
        gender,
      } = req.body;

      if (
        !fullname ||
        !email ||
        !address ||
        !phone ||
        !dob ||
        !qualification ||
        !basicsalary ||
        !gender
      ) {
        return res.status(400).json({ message: "All fields are required" });
      }

      if (isNaN(phone) || phone.toString().length !== 10) {
        return res.status(400).json({ message: "Invalid phone number" });
      }

      if (isNaN(basicsalary)) {
        return res.status(400).json({ message: "Invalid basic salary" });
      }

      if (!/^\S+@\S+\.\S+$/.test(email)) {
        return res.status(400).json({ message: "Invalid email format" });
      }

      if (!/^[a-zA-Z ]+$/.test(fullname)) {
        return res
          .status(400)
          .json({ message: "Full name can only contain letters and spaces" });
      }
      //This variable is the object to update. This object will be passed to the record of the variable "Id" and the respective id is updated with these values in the object.

      const updateSalesExecutive = {
        //fetch the retrieved info to a variable
        fullname,
        email,
        address,
        phone,
        dob,
        qualification,
        basicsalary,
        gender,
      };

      await SalesExecutive.findByIdAndUpdate(Id, updateSalesExecutive); // update the details with the update variable where id = "Id"
      logger.info(`Sales Executive updated with ID ${id}`);

      res.status(200).send("Done"); //send status
    }
  )
  .patch((error) => {
    logger.error("Error updating Sales Executive: " + error.message);
    res.status(500).json({ status: 500, error: error.message });
  });

module.exports = router;
