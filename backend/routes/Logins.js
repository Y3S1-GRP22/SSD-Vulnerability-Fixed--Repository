const router = require("express").Router();
const Admin = require('../models/admin');
const SE = require('../models/salesexecutive');
const DD = require('../models/deliverydriver');
const bcrypt = require("bcrypt");
const logger = require('../utils/logger.js'); // Assuming you have a logger configuration file 

router.post("/log", async (req, res) => {
    const { email, password, accType } = req.body;

    try {
        let user;
        if (accType === "Admin") {
            user = await Admin.findOne({ email: email });
            if (user) {
                const isMatch = user.password === password;
                if (isMatch) {
                    logger.info(`Admin login successful for email: ${email}`);
                    return res.status(200).json({ type: "admin", user });
                } else {
                    logger.error(`Invalid password attempt for Admin email: ${email}`);
                    return res.status(401).json({ message: "Invalid Password" });
                }
            }
        } else if (accType === "Sales Executive") {
            user = await SE.findOne({ email: email });
            if (user) {
                const isMatch = await bcrypt.compare(password, user.password);
                if (isMatch) {
                    logger.info(`Sales Executive login successful for email: ${email}`);
                    return res.status(200).json({ type: "se", user });
                } else {
                    logger.error(`Invalid password attempt for Sales Executive email: ${email}`);
                    return res.status(401).json({ message: "Invalid Password" });
                }
            }
        } else if (accType === "Delivery Driver") {
            user = await DD.findOne({ email: email });
            if (user) {
                const isMatch = await bcrypt.compare(password, user.password);
                if (isMatch) {
                    logger.info(`Delivery Driver login successful for email: ${email}`);
                    return res.status(200).json({ type: "dd", user });
                } else {
                    logger.error(`Invalid password attempt for Delivery Driver email: ${email}`);
                    return res.status(401).json({ message: "Invalid Password" });
                }
            }
        }

        logger.error(`Login attempt failed for email: ${email}. Account does not exist.`);
        return res.status(404).json({ message: "Account does not exist" });

    } catch (error) {
        logger.error(`Error during login attempt for email: ${email}. Error: ${error.message}`);
        return res.status(500).json({ message: "Internal Server Error" });
    }
});

module.exports = router;
