const router = require("express").Router();
const Admin = require("../models/admin");
const SalesExecutive = require("../models/salesexecutive");
const DeliveryDriver = require("../models/deliverydriver");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const logger = require("../utils/logger.js");
const authMiddleware = require("../middleware/authMiddleware.js");

const JWT_SECRET = process.env.JWT_SECRET;
const COOKIE_OPTIONS = {
  httpOnly: true,
  secure: false,
};

router.post("/log", async (req, res) => {
  const { email, password, accType } = req.body;

  try {
    let user;
    if (accType === "Admin") {
      user = await Admin.findOne({ email: email });
    } else if (accType === "Sales Executive") {
      user = await SalesExecutive.findOne({ email: email });
    } else if (accType === "Delivery Driver") {
      user = await DeliveryDriver.findOne({ email: email });
    }

    if (!user) {
      logger.error(
        `Login attempt failed for email: ${email}. Account does not exist.`
      );
      return res.status(404).json({ message: "Account does not exist" });
    }

    const isMatch = await bcrypt.compare(password, user.password);

    if (!isMatch) {
      logger.error(`Invalid password attempt for ${accType} email: ${email}`);
      return res.status(401).json({ message: "Invalid Password" });
    }

    const token = jwt.sign({ id: user._id, accType }, JWT_SECRET, {
      expiresIn: "1h",
    });

    res.cookie("authToken", token, COOKIE_OPTIONS);

    logger.info(`${accType} login successful for email: ${email}`);
    return res
      .status(200)
      .json({ message: "Login successful", user: { email, type: accType } });
  } catch (error) {
    logger.error(
      `Error during login attempt for email: ${email}. Error: ${error.message}`
    );
    return res.status(500).json({ message: "Internal Server Error" });
  }
});

router.post("/logout", (req, res) => {
  res.clearCookie("authToken");
  return res.status(200).json({ message: "Logged out successfully" });
});

router.get("/auth-user", authMiddleware, (req, res) => {
  const { accType } = req.user;
  return res.status(200).json({ userType: accType });
});

module.exports = router;
