const router = require("express").Router();
const Transaction = require("../models/transaction");
const logger = require("../utils/logger");
const helmet = require("helmet");
const rateLimit = require("express-rate-limit");

router.use(helmet());

const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: "Too many requests from this IP, please try again later.",
});

router.use(apiLimiter); // Ensure you have a logger utility

// CREATE - Add a new transaction
router.post("/insertT", async (req, res) => {
  const { name, type, category, amount, remark, date, did } = req.body;

  if (!name || !type || !category || !amount || !remark || !date) {
    return res
      .status(400)
      .json({ status: "Error", message: "All fields are required" });
  }

  if (isNaN(amount) || amount <= 0) {
    return res
      .status(400)
      .json({ status: "Error", message: "Amount must be a positive number" });
  }

  const newTransaction = new Transaction({
    name,
    type,
    category,
    amount: Number(amount),
    remark,
    date,
    did,
  });

  try {
    await newTransaction.save();
    logger.info(`Transaction added: ${JSON.stringify(newTransaction)}`);
    res.status(201).json({ status: "Success", message: "Transaction Added" });
  } catch (err) {
    logger.error("Error adding transaction: " + err.message);
    res
      .status(500)
      .json({
        status: "Error",
        message: "Error with adding transaction",
        error: err.message,
      });
  }
});

// READ - Get transaction details by ID
router.get("/get/:id", async (req, res) => {
  const id = req.params.id;

  try {
    const transaction = await Transaction.findOne({ _id: id });
    if (transaction) {
      logger.info(`Transaction details fetched for ID: ${id}`);
      res.status(200).json({ status: "Success", transaction });
    } else {
      logger.warn(`No transaction found for ID: ${id}`);
      res
        .status(404)
        .json({ status: "Error", message: "Transaction not found" });
    }
  } catch (err) {
    logger.error("Error fetching transaction details: " + err.message);
    res
      .status(500)
      .json({
        status: "Error",
        message: "Error with fetching details",
        error: err.message,
      });
  }
});

// DELETE - Delete a transaction by ID
router.delete("/delete/:id", async (req, res) => {
  const id = req.params.id;

  try {
    const result = await Transaction.findByIdAndDelete(id);
    if (result) {
      logger.info(`Transaction with ID: ${id} deleted`);
      res
        .status(200)
        .json({ status: "Success", message: "Transaction deleted" });
    } else {
      logger.warn(`No transaction found to delete for ID: ${id}`);
      res
        .status(404)
        .json({ status: "Error", message: "Transaction not found" });
    }
  } catch (err) {
    logger.error("Error deleting transaction: " + err.message);
    res
      .status(500)
      .json({
        status: "Error",
        message: "Error with deleting transaction",
        error: err.message,
      });
  }
});

module.exports = router;
