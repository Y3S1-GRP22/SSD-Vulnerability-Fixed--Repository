const router = require("express").Router();
const billsSchema = require("../models/bills");
const { body, param } = require("express-validator");
const { isISO8601 } = require("validator");
const rateLimit = require("express-rate-limit");
const helmet = require("helmet");
const logger = require("../utils/logger.js");

router.use(helmet());

const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: "Too many requests from this IP, please try again later.",
});

router.use(apiLimiter);

//REad Bills------------------------------------------------------------------

router.get("/readB", async (req, res) => {
  try {
    const data = await billsSchema.find({});
    res.send(data);
    logger.info("Bills fetched successfully");
  } catch (error) {
    logger.error("Error fetching bills: ", error);
    res.status(500).send("Error fetching bills");
  }
});

//Delete Bills----------------------------------------------------------------------------

router.delete("/deleteBills/:id", async (req, res) => {
  const id = req.params.id;

  try {
    await billsSchema.findByIdAndRemove(id).exec();
    res.send("Bill deleted successfully");
    logger.info(`Bill with ID: ${id} deleted`);
  } catch (error) {
    logger.error("Error deleting bill: ", error);
    res.status(500).send("Error deleting bill");
  }
});

//Update Bills----------------------------------------------------------------------------

router
  .route("/updateBills/:id")
  .put(
    [
      body("newName").trim().escape(),
      body("newAmount").trim(),
      body("newStatus").trim().escape(),
      body("newDate").trim(),
    ],
    async (req, res) => {
      const id = req.params.id;

      const { newName, newAmount, newStatus, newDate } = req.body;

      if (newName === null || newName.trim().length === 0) {
        return res.status(400).json({ error: "Name cannot be null or empty" });
      }

      if (newName.length < 3) {
        return res
          .status(400)
          .json({ error: "Name must be at least 3 characters long" });
      }

      if (isNaN(newAmount)) {
        return res.status(400).json({ error: "Amount must be a number" });
      }

      if (newStatus === null || newStatus.trim().length === 0) {
        return res
          .status(400)
          .json({ error: "Status cannot be null or empty" });
      }

      if (!isISO8601(newDate)) {
        return res
          .status(400)
          .json({ error: "Date must be in a valid ISO8601 format" });
      }

      const updateTransaction = {
        name: newName,
        amount: newAmount,
        status: newStatus,
        date: newDate,
      };

      try {
        const update = await billsSchema
          .findByIdAndUpdate(id, updateTransaction, { new: true })
          .exec();
        if (!update) {
          res.status(404).send("Bill not found");
          logger.error(`Bill with ID: ${id} not found`);
          return;
        }
        res.send("Bill updated successfully");
        logger.info(`Bill with ID: ${id} updated successfully`);
      } catch (error) {
        logger.error("Error updating bill: ", error);
        res.status(500).send("Error updating bill");
      }
    }
  );

//Find Bills By ID----------------------------------------------------------------------------

router.get(
  "/readBillsByID/:id",
  [param("id").trim().escape()],
  async (req, res) => {
    fetchid = req.params.id;

    try {
      const data = await billsSchema.findById(fetchid);
      if (!data) {
        res.status(404).send("Bill not found");
        logger.error(`Bill with ID: ${fetchid} not found`);
        return;
      }
      res.send(data);
      logger.info(`Bill with ID: ${fetchid} fetched successfully`);
    } catch (error) {
      logger.error("Error fetching bill by ID: ", error);
      res.status(500).send("Error fetching bill by ID");
    }
  }
);

//Add Bills ----------------------------------------------------------------------------

router
  .route("/insertBills")
  .post(
    [
      body("name").trim().escape(),
      body("amount").trim(),
      body("status").trim().escape(),
      body("date").trim().escape(),
    ],
    (req, res) => {
      const { name, amount, status, date } = req.body;

      if (name === null || name.trim().length === 0) {
        return res.status(400).json({ error: "Name cannot be null or empty" });
      }

      if (name.length < 3) {
        return res
          .status(400)
          .json({ error: "Name must be at least 3 characters long" });
      }

      if (isNaN(amount)) {
        return res.status(400).json({ error: "Amount must be a number" });
      }

      if (status === null || status.trim().length === 0) {
        return res
          .status(400)
          .json({ error: "Status cannot be null or empty" });
      }

      if (!isISO8601(date)) {
        return res
          .status(400)
          .json({ error: "Date must be in a valid ISO8601 format" });
      }

      var bills = new billsSchema({
        name,
        amount,
        status,
        date,
      });

      bills
        .save()
        .then(() => {
          res.json("Bill added successfully");
          logger.info("New bill added");
        })
        .catch((error) => {
          logger.error("Error adding bill: ", error);
          res.status(500).send("Error adding bill");
        });
    }
  );

//find Duplicate Bills ----------------------------------------------------------------------------

router.get("/readDuplicate/:did", async (req, res) => {
  fetchid = req.params.did;
  try {
    const data = await billsSchema.find({ did: fetchid });
    res.send(data);
    logger.info(`Duplicate bills fetched for ID: ${fetchid}`);
  } catch (error) {
    logger.error("Error fetching duplicate bills: ", error);
    res.status(500).send("Error fetching duplicate bills");
  }
});

//Search Bills ----------------------------------------------------------------------------

router.get("/search/:key", async (req, res) => {
  const searchKey = req.params.key;

  try {
    const result = await billsSchema.find({
      $or: [
        { name: { $regex: searchKey, $options: "i" } },
        { status: { $regex: searchKey, $options: "i" } },
      ],
    });
    res.send(result);
    logger.info(`Bills search result for key: ${searchKey}`);
  } catch (error) {
    logger.error("Error searching bills: ", error);
    res.status(500).send("Error searching bills");
  }
});

module.exports = router;
