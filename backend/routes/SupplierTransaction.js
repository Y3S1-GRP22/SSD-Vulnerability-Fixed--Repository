const router = require("express").Router();
let SupplierTransaction = require("../models/SupplierTransaction");
const { body, param } = require("express-validator");
const rateLimit = require("express-rate-limit");
const helmet = require("helmet");
const logger = require("../utils/logger.js");

router.use(helmet());

const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: "Too many requests from this IP, please try again later.",
});

router.use(apiLimiter);

router
  .route("/addsupplierTransaction")
  .post(
    [
      body("InvoiceNo").trim().escape(),
      body("SuppliedDate").trim().escape(),
      body("Supplier").trim().escape(),
      body("ProductName").trim().escape(),
      body("Quantity").trim().escape(),
      body("Amount").trim().escape(),
    ],
    (req, res) => {
      const InvoiceNo = req.body.InvoiceNo;
      const SuppliedDate = req.body.SuppliedDate;
      const Supplier = req.body.Supplier;
      const ProductName = req.body.ProductName;
      const Quantity = Number(req.body.Quantity);
      const Amount = Number(req.body.Amount);

      if (!InvoiceNo) {
        return res.status(400).json({ message: "InvoiceNo is required" });
      }
      if (!SuppliedDate) {
        return res.status(400).json({ message: "SuppliedDate is required" });
      }
      if (!Supplier) {
        return res.status(400).json({ message: "Supplier is required" });
      }
      if (!ProductName) {
        return res.status(400).json({ message: "ProductName is required" });
      }
      if (!Quantity || isNaN(Quantity) || Quantity <= 0) {
        return res
          .status(400)
          .json({ message: "Quantity must be a positive number" });
      }
      if (!Amount || isNaN(Amount) || Amount <= 0) {
        return res
          .status(400)
          .json({ message: "Amount must be a positive number" });
      }

      const newSupplierTransaction = new SupplierTransaction({
        InvoiceNo,
        SuppliedDate,
        Supplier,
        ProductName,
        Quantity,
        Amount,
      });

      try {
        newSupplierTransaction.save();
        logger.info(`Supplier transaction added: ${InvoiceNo}`);
        res.status(201).json({ message: "Supplier Transaction Added" });
      } catch (err) {
        logger.error("Error adding supplier transaction: " + err.message);
        res.status(500).json({
          status: "Error with adding supplier transaction",
          error: err.message,
        });
      }
    }
  );

//Display Supplier Transaction
router.route("/supplierTransaction").get(async (req, res) => {
  try {
    const supplierTransactions = await SupplierTransaction.find();
    logger.info("Fetched all supplier transactions");
    res.status(200).json(supplierTransactions);
  } catch (err) {
    logger.error("Error fetching supplier transactions: " + err.message);
    res.status(500).json({
      status: "Error with fetching supplier transactions",
      error: err.message,
    });
  }
});

//Update Supplier Transactions
router
  .route("/updatesupplierTransaction/:id")
  .put(
    [
      param("id").trim().escape(),
      body("InvoiceNo").trim().escape(),
      body("SuppliedDate").trim().escape(),
      body("Supplier").trim().escape(),
      body("ProductName").trim().escape(),
      body("Quantity").trim().escape(),
      body("Amount").trim().escape(),
    ],
    async (req, res) => {
      let supplierTransactionId = req.params.id;

      const {
        InvoiceNo,
        SuppliedDate,
        Supplier,
        ProductName,
        Quantity,
        Amount,
      } = req.body;

      if (!InvoiceNo) {
        return res.status(400).json({ message: "InvoiceNo is required" });
      }
      if (!SuppliedDate) {
        return res.status(400).json({ message: "SuppliedDate is required" });
      }
      if (!Supplier) {
        return res.status(400).json({ message: "Supplier is required" });
      }
      if (!ProductName) {
        return res.status(400).json({ message: "ProductName is required" });
      }
      if (!Quantity || isNaN(Quantity) || Quantity <= 0) {
        return res
          .status(400)
          .json({ message: "Quantity must be a positive number" });
      }
      if (!Amount || isNaN(Amount) || Amount <= 0) {
        return res
          .status(400)
          .json({ message: "Amount must be a positive number" });
      }

      const updateSupplierTransaction = {
        InvoiceNo,
        SuppliedDate,
        Supplier,
        ProductName,
        Quantity,
        Amount,
      };

      try {
        const updatedTransaction = await SupplierTransaction.findByIdAndUpdate(
          supplierTransactionId,
          updateSupplierTransaction,
          { new: true }
        );
        logger.info(
          `Supplier transaction with ID ${supplierTransactionId} updated`
        );
        res.status(200).json({
          status: "Supplier Transaction updated",
          supplierTransaction: updatedTransaction,
        });
      } catch (err) {
        logger.error("Error updating supplier transaction: " + err.message);
        res.status(500).json({
          status: "Error with updating supplier transaction",
          error: err.message,
        });
      }
    }
  );

router
  .route("/deletesupplierTransaction/:id")
  .delete([param("id").trim().escape()], async (req, res) => {
    let supplierTransactionId = req.params.id;

    try {
      await SupplierTransaction.findByIdAndDelete(supplierTransactionId);
      logger.info(
        `Supplier transaction with ID ${supplierTransactionId} deleted`
      );
      res.status(200).json({ status: "Supplier Transaction deleted" });
    } catch (err) {
      logger.error("Error deleting supplier transaction: " + err.message);
      res.status(500).json({
        status: "Error with deleting supplier transaction",
        error: err.message,
      });
    }
  });

//get details of single transaction by invoice no
router.route("/getsupplierTransaction/:InvoiceNo").get((req, res) => {
  let InvoiceNoS = req.params.InvoiceNo;

  try {
    const supplierTransaction = SupplierTransaction.find({
      InvoiceNo: InvoiceNoS,
    });
    if (supplierTransaction.length > 0) {
      logger.info(`Supplier transaction with InvoiceNo ${InvoiceNoS} fetched`);
      res
        .status(200)
        .json({ status: "Supplier Transaction fetched", supplierTransaction });
    } else {
      logger.warn(`No supplier transaction found with InvoiceNo ${InvoiceNoS}`);
      res.status(404).json({ status: "Supplier Transaction not found" });
    }
  } catch (err) {
    logger.error("Error fetching supplier transaction: " + err.message);
    res.status(500).json({
      status: "Error with fetching supplier transaction",
      error: err.message,
    });
  }
});

//Fetching inventory details based on the item code.
router
  .route("/getsupplierTransactionProductName/:productName")
  .get(async (req, res) => {
    let productName = req.params.productName;

    try {
      const supplierTransaction = await SupplierTransaction.findOne({
        ProductName: productName,
      });
      if (supplierTransaction) {
        logger.info(
          `Supplier transaction with ProductName ${productName} fetched`
        );
        res.status(200).json({
          status: "Supplier Transaction Details fetched",
          supplierTransaction,
        });
      } else {
        logger.warn(
          `No supplier transaction found with ProductName ${productName}`
        );
        res.status(404).json({ status: "Supplier Transaction not found" });
      }
    } catch (err) {
      logger.error("Error fetching supplier transaction: " + err.message);
      res.status(500).json({
        status: "Error with fetching supplier transaction details",
        error: err.message,
      });
    }
  });

//UPDATING THE QUANTITY OF A SPECIFIC ITEM CODE.

router
  .route("/updateQuantitysupplierTransaction/:id")
  .put([param("id").trim().escape()], async (req, res) => {
    let supplierTransactionId = req.params.id;

    const Quantity = Number(req.body.Quantity);

    try {
      const updatedTransaction = await SupplierTransaction.findByIdAndUpdate(
        supplierTransactionId,
        { Quantity },
        { new: true }
      );
      logger.info(
        `Quantity updated for supplier transaction with ID ${supplierTransactionId}`
      );
      res.status(200).json({
        status: "Quantity updated",
        supplierTransaction: updatedTransaction,
      });
    } catch (err) {
      logger.error("Error updating quantity: " + err.message);
      res
        .status(500)
        .json({ status: "Error with updating quantity", error: err.message });
    }
  });

router.get("/search/:key", async (req, res) => {
  const key = req.params.key;

  try {
    const result = await SupplierTransaction.find({
      $or: [
        { InvoiceNo: { $regex: req.params.key } },
        {
          ProductName: { $regex: req.params.key },
        },
        {
          Supplier: { $regex: req.params.key },
        },
      ],
    });
    logger.info(`Searched supplier transactions with key: ${key}`);
    res.status(200).json(result);
  } catch (err) {
    logger.error("Error searching supplier transactions: " + err.message);
    res.status(500).json({
      status: "Error with searching supplier transactions",
      error: err.message,
    });
  }
});

router.get("/inventoryReport", async (req, res) => {
  try {
    const products = await SupplierTransaction.aggregate([
      { $group: { _id: "$ProductName", Quantity: { $sum: "$Quantity" } } },
      { $sort: { _id: 1 } },
    ]);
    logger.info("Inventory report generated");
    res.status(200).json(products);
  } catch (err) {
    logger.error("Error generating inventory report: " + err.message);
    res.status(500).json({ message: err.message });
  }
});

module.exports = router;
