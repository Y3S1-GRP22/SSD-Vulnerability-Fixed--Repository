const express = require("express");
const router = express.Router();
const Product = require("../models/Product");
const { body, param } = require("express-validator");
const rateLimit = require('express-rate-limit');
const helmet = require('helmet');

router.use(helmet());

const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: 'Too many requests from this IP, please try again later.',
});

router.use(apiLimiter);


//GET ALL THE PRODUCT DETAILS
router.get("/",[
  body("ProductName").trim().escape(),
  body("Price").trim().escape(),
  body("Description").trim().escape(),
  body("Qty").trim().escape(),
  body("ImageBase64").trim().escape(),
  body("Category").trim().escape(),
], async (req, res) => {
  try {
    const product = await Product.find();
    res.json(product);
  } catch (err) {
    res.json({ message: err });
  }
});

//SUBMIT PRODUCT INFORMATION
router.post("/", async (req, res) => {
  
  const { ProductName, Price, Description, Qty, ImageBase64, Category } = req.body;

  if (!ProductName) {
    return res.status(400).json({ message: "ProductName is required." });
  }
  if (!Price || isNaN(Number(Price))) {
    return res.status(400).json({ message: "Price is required and should be a valid number." });
  }
  if (!Description) {
    return res.status(400).json({ message: "Description is required." });
  }
  if (!Qty || isNaN(Number(Qty))) {
    return res.status(400).json({ message: "Qty is required and should be a valid number." });
  }
  if (!Category){
    return res.status(400).json({ message: "Category is required." });
  }

  const product = new Product({
    ProductName: req.body.ProductName,
    Price: req.body.Price,
    Description: req.body.Description,
    Qty: req.body.Qty,
    ImageBase64: req.body.ImageBase64,
    Category: req.body.Category,
  });

  try {
    const saveProduct = await product.save();
    res.json(saveProduct);
  } catch (err) {
    res.json({ message: err });
  }
});

//SPECIFIC PRODUCT
router.get("/:productId", [
  param('productId').trim().escape(),
], async (req, res) => {
  try {
    const product = await Product.findById(req.params.productId);
    res.json(product);
  } catch (err) {
    res.json({ message: err });
  }
});

//DELETE SPECIFIC PRODUCT
router.delete("/:productId", [
  param('productId').trim().escape(),
], async (req, res) => {
  try {
    const removeProduct = await Product.remove({
      _id: req.params.productId,
    });
    res.json(removeProduct);
  } catch (err) {
    res.json({ message: err });
  }
});

//UPDATE A PRODUCT DETAILS
router.patch("/:productId", [
  param('productId').trim().escape(),
  body("ProductName").trim().escape(),
  body("Price").trim().escape(),
  body("Description").trim().escape(),
  body("Qty").trim().escape(),
  body("ImageBase64").trim().escape(),
  body("Category").trim().escape(),
], async (req, res) => {
  const { ProductName, Price, Description, Qty, ImageBase64, Category } = req.body;

  // Validation
  if (!ProductName) {
    return res.status(400).json({ message: "ProductName is required." });
  }
  if (!Price || isNaN(Number(Price))) {
    return res.status(400).json({ message: "Price is required and should be a valid number." });
  }
  if (!Description) {
    return res.status(400).json({ message: "Description is required." });
  }
  if (!Qty || isNaN(Number(Qty))) {
    return res.status(400).json({ message: "Qty is required and should be a valid number." });
  }
  if (!Category){
    return res.status(400).json({ message: "Category is required." });
  }

  try {
    const updatedProduct = await Product.updateOne(
      { _id: req.params.productId },
      {
        $set: {
          ...(ProductName && { ProductName: ProductName.trim() }),
          ...(Price && { Price: Number(Price) }),
          ...(Description && { Description: Description.trim() }),
          ...(Qty && { Qty: Number(Qty) }),
          ...(ImageBase64 && { ImageBase64: ImageBase64.trim() }), // Optional field, sanitized
          ...(Category && { Category: Category.trim() }),
        },
      }
    );
    if (updatedProduct.nModified === 0) {
      return res.status(404).json({ message: "Product not found or no changes made" });
    }
    res.status(200).json({ message: "Product updated successfully", updatedProduct });
  } catch (err) {
    res.status(500).json({ message: "Error updating product", error: err.message });
  }
});

router.get("/allProd", async (req, res) => {
  try {
    const product = await productModel
      .findOne({ slug: req.params.slug })
      .select("-photo")
      .populate("category");
    res.status(200).send({
      success: true,
      message: "Single Product Fetched",
      product,
    });
  } catch (error) {
    console.log(error);
    res.status(500).send({
      success: false,
      message: "Eror while getitng single product",
      error,
    });
  }
});
module.exports = router;
