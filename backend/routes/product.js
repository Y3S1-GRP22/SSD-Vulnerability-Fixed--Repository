const express = require("express");
const router = express.Router();
const Product = require("../models/Product");
const { body, param } = require("express-validator");
const rateLimit = require("express-rate-limit");
const helmet = require("helmet");
const logger = require("../utils/logger.js");

router.use(helmet());

const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: "Too many requests from this IP, please try again later.",
});

router.use(apiLimiter);

//GET ALL THE PRODUCT DETAILS
router.get(
  "/",
  [
    body("ProductName").trim().escape(),
    body("Price").trim().escape(),
    body("Description").trim().escape(),
    body("Qty").trim().escape(),
    body("ImageBase64").trim().escape(),
    body("Category").trim().escape(),
  ],
  async (req, res) => {
    try {
      const products = await Product.find();
      logger.info("Fetched all products");
      res.status(200).json(products);
    } catch (err) {
      logger.error("Error fetching products: " + err.message);
      res
        .status(500)
        .json({ message: "Error fetching products", error: err.message });
    }
  }
);

//SUBMIT PRODUCT INFORMATION
router.post("/", async (req, res) => {
  const { ProductName, Price, Description, Qty, ImageBase64, Category } =
    req.body;

  if (!ProductName) {
    return res.status(400).json({ message: "ProductName is required." });
  }
  if (!Price || isNaN(Number(Price))) {
    return res
      .status(400)
      .json({ message: "Price is required and should be a valid number." });
  }
  if (!Description) {
    return res.status(400).json({ message: "Description is required." });
  }
  if (!Qty || isNaN(Number(Qty))) {
    return res
      .status(400)
      .json({ message: "Qty is required and should be a valid number." });
  }
  if (!Category) {
    return res.status(400).json({ message: "Category is required." });
  }

  const product = new Product({
    ProductName: req.body.ProductName,
    Price: req.body.Price,
    Description: req.body.Description,
    Qty: req.body.Qty,
    ImageBase64: req.body.ImageBase64,
    Category: req.body.Category,
  });

  try {
    const savedProduct = await product.save();
    logger.info("Product added successfully");
    res.status(201).json(savedProduct);
  } catch (err) {
    logger.error("Error adding product: " + err.message);
    res
      .status(500)
      .json({ message: "Error adding product", error: err.message });
  }
});

//SPECIFIC PRODUCT
router.get(
  "/:productId",
  [param("productId").trim().escape()],
  async (req, res) => {
    try {
      const product = await Product.findById(req.params.productId);
      if (product) {
        logger.info("Fetched product details");
        res.status(200).json(product);
      } else {
        logger.warn("Product not found");
        res.status(404).json({ message: "Product not found" });
      }
    } catch (err) {
      logger.error("Error fetching product: " + err.message);
      res
        .status(500)
        .json({ message: "Error fetching product", error: err.message });
    }
  }
);

//DELETE SPECIFIC PRODUCT
router.delete(
  "/:productId",
  [param("productId").trim().escape()],
  async (req, res) => {
    try {
      const removeProduct = await Product.findByIdAndDelete(
        req.params.productId
      );
      if (removeProduct) {
        logger.info("Product deleted successfully");
        res.status(200).json({ message: "Product deleted" });
      } else {
        logger.warn("Product not found");
        res.status(404).json({ message: "Product not found" });
      }
    } catch (err) {
      logger.error("Error deleting product: " + err.message);
      res
        .status(500)
        .json({ message: "Error deleting product", error: err.message });
    }
  }
);

//UPDATE A PRODUCT DETAILS
router.patch(
  "/:productId",
  [
    param("productId").trim().escape(),
    body("ProductName").trim().escape(),
    body("Price").trim().escape(),
    body("Description").trim().escape(),
    body("Qty").trim().escape(),
    body("ImageBase64").trim().escape(),
    body("Category").trim().escape(),
  ],
  async (req, res) => {
    const { ProductName, Price, Description, Qty, ImageBase64, Category } =
      req.body;

    // Validation
    if (!ProductName) {
      return res.status(400).json({ message: "ProductName is required." });
    }
    if (!Price || isNaN(Number(Price))) {
      return res
        .status(400)
        .json({ message: "Price is required and should be a valid number." });
    }
    if (!Description) {
      return res.status(400).json({ message: "Description is required." });
    }
    if (!Qty || isNaN(Number(Qty))) {
      return res
        .status(400)
        .json({ message: "Qty is required and should be a valid number." });
    }
    if (!Category) {
      return res.status(400).json({ message: "Category is required." });
    }

    try {
      const updatedProduct = await Product.updateOne(
        { _id: req.params.productId },
        {
          $set: {
            ...(ProductName && { ProductName: ProductName.trim() }),
            ...(Price && { Price: Number(Price) }),
            ...(Description && { Description: Description.trim() }),
            ...(Qty && { Qty: Number(Qty) }),
            ...(ImageBase64 && { ImageBase64: ImageBase64.trim() }), // Optional field, sanitized
            ...(Category && { Category: Category.trim() }),
          },
        }
      );
      if (updatedProduct.nModified === 0) {
        logger.warn("Product not found or no changes made");

        return res
          .status(404)
          .json({ message: "Product not found or no changes made" });
      }
      logger.info("Product updated successfully");

      res
        .status(200)
        .json({ message: "Product updated successfully", updatedProduct });
    } catch (err) {
      logger.error("Error updating product: " + err.message);
      res
        .status(500)
        .json({ message: "Error updating product", error: err.message });
    }
  }
);

router.get("/allProd", async (req, res) => {
  try {
    const product = await Product.findOne({ slug: req.query.slug })
      .select("-photo")
      .populate("category");
    if (product) {
      logger.info("Fetched product by slug");
      res.status(200).send({
        success: true,
        message: "Single Product Fetched",
        product,
      });
    } else {
      logger.warn("Product not found");
      res.status(404).send({
        success: false,
        message: "Product not found",
      });
    }
  } catch (error) {
    logger.error("Error fetching product by slug: " + error.message);
    res.status(500).send({
      success: false,
      message: "Error while getting single product",
      error: error.message,
    });
  }
});
module.exports = router;
