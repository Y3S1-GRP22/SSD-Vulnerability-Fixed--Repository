const router = require("express").Router();
let Delivery = require("../models/delivery");
const { body, param } = require("express-validator");
const rateLimit = require('express-rate-limit');
const helmet = require('helmet');
const logger = require('../utils/logger.js'); 


router.use(helmet());

const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, 
  max: 100,
  message: 'Too many requests from this IP, please try again later.',
});

router.use(apiLimiter);


//http://localhost:8070/delivery/add 

router.route("/add").post([
    body('deliveryid').trim().escape(),
    body('orderid').trim().escape(),
    body('trackingid').trim().escape(),
    body('did').trim().escape().notEmpty(),
    body('deliveryaddress').trim().escape().notEmpty(),
    body('deliveryfee').isNumeric()
], (req, res) => {

    const deliveryid =  (req.body.deliveryid);
    const orderid =  (req.body.orderid);
    const trackingid = (req.body.trackingid);
    const did = (req.body.did)
    const deliveryaddress = req.body.deliveryaddress;
    const deliveryfee =  (req.body.deliveryfee);

    if (!deliveryid || deliveryid.trim().length === 0) {
        return res.status(400).json({ error: "Delivery ID is required" });
    }

    if (!orderid || orderid.trim().length === 0) {
        return res.status(400).json({ error: "Order ID is required" });
    }

    if (!trackingid || trackingid.trim().length === 0) {
        return res.status(400).json({ error: "Tracking ID is required" });
    }

    if (!did || did.trim().length === 0) {
        return res.status(400).json({ error: "Driver ID (did) is required" });
    }

    if (!deliveryaddress || deliveryaddress.trim().length === 0) {
        return res.status(400).json({ error: "Delivery address is required" });
    }

    if (!deliveryfee || isNaN(deliveryfee) || deliveryfee < 0) {
        return res.status(400).json({ error: "Valid delivery fee is required" });
    }

    try {
      const { deliveryid, orderid, trackingid, did, deliveryaddress, deliveryfee } = req.body;

      const newDelivery = new Delivery({
          deliveryid,
          orderid,
          trackingid,
          did,
          deliveryaddress,
          deliveryfee,
          status: "Order Being Received",
      });

       newDelivery.save();
      logger.info("New Delivery Added");
      res.status(201).json("New Delivery Added");
  } catch (err) {
      logger.error(`Error adding delivery: ${err.message}`);
      res.status(500).send({ status: "Error adding delivery", error: err.message });
  }
})

router.route("/get").get(async(req, res) => {
  try {
    const deliveries = await Delivery.find();
    logger.info("Fetched all deliveries");
    res.status(200).json(deliveries);
} catch (err) {
    logger.error(`Error fetching deliveries: ${err.message}`);
    res.status(500).send({ status: "Error fetching deliveries", error: err.message });
}
})


router.route("/update/:id").put([
    param('id').trim().escape(),
  ], async (req, res) => {
   let userId = req.params.id; 
   const{deliveryid,orderid,trackingid,did,deliveryaddress,deliveryfee} = req.body;

   if (!deliveryid || deliveryid.trim().length === 0) {
    return res.status(400).json({ error: "Delivery ID is required" });
}

if (!orderid || orderid.trim().length === 0) {
    return res.status(400).json({ error: "Order ID is required" });
}

if (!trackingid || trackingid.trim().length === 0) {
    return res.status(400).json({ error: "Tracking ID is required" });
}

if (!did || did.trim().length === 0) {
    return res.status(400).json({ error: "Driver ID (did) is required" });
}

if (!deliveryaddress || deliveryaddress.trim().length === 0) {
    return res.status(400).json({ error: "Delivery address is required" });
}

if (!deliveryfee || isNaN(deliveryfee) || deliveryfee < 0) {
    return res.status(400).json({ error: "Valid delivery fee is required" });
}

   const updateDelivery = {
        
    deliveryid,
    orderid,
    trackingid,
    did,
    deliveryaddress,
    deliveryfee,

   }

   try {
    const update = await Delivery.findByIdAndUpdate(userId, updateDelivery, { new: true });
    if (!update) {
        logger.info("Delivery not found");
        return res.status(404).send({ status: "Delivery not found" });
    }
    logger.info("Delivery updated successfully");
    res.status(200).send({ status: "Delivery updated", delivery: update });
} catch (err) {
    logger.error(`Error updating delivery: ${err.message}`);
    res.status(500).send({ status: "Error updating delivery", error: err.message });
}
})

router.route("/updateDD/:id").put([
    param('id').trim().escape(),
  ], async (req, res) => {
    let userId = req.params.id; 
    const{status} = req.body;
 
    const updateDelivery = {
         
        status
 
    }
 
    try {
      const update = await Delivery.findByIdAndUpdate(userId, updateDelivery, { new: true });
      if (!update) {
          logger.info("Delivery not found");
          return res.status(404).send({ status: "Delivery not found" });
      }
      logger.info("Delivery driver updated successfully");
      res.status(200).send({ status: "Delivery driver updated", delivery: update });
  } catch (err) {
      logger.error(`Error updating delivery status: ${err.message}`);
      res.status(500).send({ status: "Error updating delivery status", error: err.message });
  }
 })


router.route('/delete/:id').delete([
    param('id').trim().escape(),
  ], async(req, res) => {
    let userId = req.params.id;
    try {
      const delivery = await Delivery.findByIdAndDelete(userId);
      if (!delivery) {
          logger.info("Delivery not found");
          return res.status(404).send({ status: "Delivery not found" });
      }
      logger.info("Delivery deleted successfully");
      res.status(200).send({ status: "Delivery deleted successfully" });
  } catch (err) {
      logger.error(`Error deleting delivery: ${err.message}`);
      res.status(500).send({ status: "Error deleting delivery", error: err.message });
  }
})

router.route("/get/:id").get([
    param('id').trim().escape(),
  ], async (req, res) => {
    let objId = req.params.id;
    try {
      const delivery = await Delivery.findById(objId);
      if (!delivery) {
          logger.info("Delivery not found");
          return res.status(404).send({ status: "Delivery not found" });
      }
      logger.info("Delivery found");
      res.status(200).send({ status: "Delivery Found", delivery });
  } catch (err) {
      logger.error(`Error fetching delivery by ID: ${err.message}`);
      res.status(500).send({ status: "Error fetching delivery", error: err.message });
  }

})

router.route("/getDeliDid/:id").get([
    param('id').trim().escape(),
  ], (req, res) => {
    let id = req.params.id;
  
    try {
      const deliveries =  Delivery.find({ did: id });
      logger.info("Fetched deliveries by delivery ID");
      res.status(200).json(deliveries);
  } catch (err) {
      logger.error(`Error fetching deliveries by delivery ID: ${err.message}`);
      res.status(500).send({ status: "Error fetching deliveries by delivery ID", error: err.message });
  }
  });


module.exports = router;