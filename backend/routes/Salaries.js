const router = require("express").Router();
const nodemailer = require("nodemailer");
const Salary = require("../models/salary"); //import salary model
const SE = require("../models/salesexecutive"); //import sales executive model
const DD = require("../models/deliverydriver"); //import delivery model
const C = require("../models/c"); //import leave c model
const sanitizeHtml = require("sanitize-html");
const { body, param } = require("express-validator");
const rateLimit = require("express-rate-limit");
const helmet = require("helmet");
const logger = require("../utils/logger.js");

router.use(helmet());

const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: "Too many requests from this IP, please try again later.",
});

router.use(apiLimiter);

//CREATE - Create salary

router.post(
  "/addsal",
  [
    body("type").trim().escape(),
    body("eid").trim().escape(),
    body("basicsalary").trim().escape(),
    body("othrs").trim().escape(),
    body("otrate").trim().escape(),
    body("paydate").trim().escape(),
    body("netsalary").trim().escape(),
    body("email").trim().escape(),
  ],
  async (req, res) => {
    // get the body of the request and store the values in variables
    const type = req.body.type;
    const eid = req.body.eid;
    const basicsalary = Number(req.body.basicsalary);
    const othrs = Number(req.body.othrs);
    const otrate = Number(req.body.otrate);
    var paydate = req.body.paydate;
    const netsalary = Number(req.body.netsalary);
    const email = req.body.email;
    const msg = `Your salary Rs. ${sanitizeHtml(netsalary)} has been credited.`; //message that to be sent in the email

    if (!eid) {
      return res.status(400).json({ message: "Missing 'eid'." });
    }
    if (!basicsalary || isNaN(basicsalary) || basicsalary <= 0) {
      return res.status(400).json({ message: "Invalid 'basicsalary'." });
    }
    if (!othrs || isNaN(othrs) || othrs < 0) {
      return res.status(400).json({ message: "Invalid 'othrs'." });
    }
    if (!otrate || isNaN(otrate) || otrate < 0) {
      return res.status(400).json({ message: "Invalid 'otrate'." });
    }
    if (!paydate) {
      return res.status(400).json({ message: "Missing 'paydate'." });
    }
    if (!netsalary || isNaN(netsalary) || netsalary <= 0) {
      return res.status(400).json({ message: "Invalid 'netsalary'." });
    }
    if (!email || !/\S+@\S+\.\S+/.test(email)) {
      return res.status(400).json({ error: "Valid email is required" });
    }

    if (type == "Sales Executive") {
      SE.findOne({ sid: `${eid}` }, function (err, doc) {
        //check if the eid exists in the sales executive table
        if (err) {
          console.error(err);
        } else {
          const hasMatch = Boolean(doc); // convert to boolean value
          if (hasMatch == true) {
            //if eid exists
            C.findOneAndUpdate(
              //autoincrement field
              { id: "autoval" },
              { $inc: { seq: 1 } },
              { new: true },
              (err, cd) => {
                let seqId;
                if (cd == null) {
                  const newval = new C({ id: "autoval", seq: 1 });
                  newval.save();
                  seqId = 1;
                } else {
                  seqId = cd.seq;
                }

                const Id = seqId; //set the autoincremented value as Id

                const newSalary = new Salary({
                  //creating object from salary model and assigning it to a const variable
                  Id,
                  type,
                  eid,
                  basicsalary,
                  othrs,
                  otrate,
                  paydate,
                  netsalary,
                });

                newSalary
                  .save()
                  .then(() => {
                    //save the newly created object in the database using save function
                    res.json("Success"); //send response
                    logger.info(`Salary created for employee ID ${eid}`);
                  })
                  .catch((err) => {
                    res.json("Failed"); //catches error and send tthe error as a json object to the frontend
                    logger.error(err);
                  });
              }
            );
            //#8f00ff
            try {
              //send email
              const transporter = nodemailer.createTransport({
                service: "gmail",
                auth: {
                  user: process.env.EMAIL,
                  pass: process.env.APP_PASSWORD,
                },
              });

              const mailOptions = {
                from: process.env.EMAIL,
                to: email,
                subject: "Salary Transaction",
                html: msg,
              };

              transporter.sendMail(mailOptions, (error, info) => {
                if (error) {
                  logger.error("Error sending email: " + error.message);
                  return res
                    .status(500)
                    .json({ status: 500, error: error.message });
                } else {
                  logger.info("Email sent: " + info.response);
                  res.status(201).json({ status: 201, info });
                }
              });
            } catch (error) {
              logger.error("Error adding salary: " + error.message);
              res.status(500).json({ status: 500, error: error.message });
            }
          } else {
            //if eid doesn't exixts
            res.json("No id"); //send response
          }
        }
      });
    } else if (type == "Delivery Driver") {
      DD.findOne({ did: `${eid}` }, function (err, doc) {
        //check if the eid exists in the delivery driver table
        if (err) {
          console.error(err);
        } else {
          const hasMatch = Boolean(doc); // convert to boolean value
          if (hasMatch == true) {
            //if eid exists
            C.findOneAndUpdate(
              //autoincrement field
              { id: "autoval" },
              { $inc: { seq: 1 } },
              { new: true },
              (err, cd) => {
                let seqId;
                if (cd == null) {
                  const newval = new C({ id: "autoval", seq: 1 });
                  newval.save();
                  seqId = 1;
                } else {
                  seqId = cd.seq;
                }
                const Id = seqId; //set the autoincremented value as Id

                const newSalary = new Salary({
                  //creating object from salary model and assigning it to a const variable
                  Id,
                  type,
                  eid,
                  basicsalary,
                  othrs,
                  otrate,
                  paydate,
                  netsalary,
                });

                newSalary
                  .save()
                  .then(() => {
                    //save the newly created object in the database using save function
                    res.json("Success"); //send response
                    logger.info(`Salary created for employee ID ${eid}`);
                  })
                  .catch((err) => {
                    //if unsuccess
                    res.json("Failed"); //catches error and send tthe error as a json object to the frontend
                    console.log(err);
                  });
              }
            );
            try {
              //send email
              const transporter = nodemailer.createTransport({
                service: "gmail",
                auth: {
                  user: process.env.EMAIL,
                  pass: process.env.APP_PASSWORD,
                },
              });

              const mailOptions = {
                from: process.env.EMAIL,
                to: email,
                subject: "Salary Transaction",
                html: msg,
              };

              transporter.sendMail(mailOptions, (error, info) => {
                if (error) {
                  logger.error("Error sending email: " + error.message);
                  return res
                    .status(500)
                    .json({ status: 500, error: error.message });
                } else {
                  logger.info("Email sent: " + info.response);
                  res.status(201).json({ status: 201, info });
                }
              });
            } catch (error) {
              logger.error("Error adding salary: " + error.message);
              res.status(500).json({ status: 500, error: error.message });
            }
          } else {
            //if eid doesn't exixts
            res.json("No id"); //send response
          }
        }
      });
    }
  }
);

//READ function - fetch data of all salary transactions

router.route("/getsalary").get((req, res) => {
  try {
    const salaries = Salary.find();
    logger.info("Fetched all salaries");
    res.status(200).json(salaries);
  } catch (err) {
    logger.error("Error fetching salaries: " + err.message);
    res
      .status(500)
      .json({ message: "Error fetching salaries", error: err.message });
  }
});

//DELETE function

router
  .route("/deletet/:id")
  .delete([param("id").trim().escape()], async (req, res) => {
    let Id = req.params.id; //get the id from the request(parameter)
    try {
      await Salary.findByIdAndDelete(Id);
      logger.info(`Salary with ID ${Id} deleted`);
      res.status(200).json("Success");
    } catch (err) {
      logger.error("Error deleting salary: " + err.message);
      res
        .status(500)
        .json({ message: "Error deleting salary", error: err.message });
    }
  });

//UPDATE function

router
  .route("/update/:id")
  .put(
    [
      param("id").trim().escape(),
      body("othrs").trim().escape(),
      body("otrate").trim().escape(),
      body("paydate").trim().escape(),
      body("netsalary").trim().escape(),
      body("email").trim().escape(),
    ],
    async (req, res) => {
      let Id = req.params.id; //get the id from the request(parameter)

      // get the body of the request and store the values in variables
      const { othrs, otrate, paydate, netsalary, email } = req.body;

      if (!othrs || isNaN(othrs) || othrs < 0) {
        return res.status(400).json({ message: "Invalid 'othrs'." });
      }
      if (!otrate || isNaN(otrate) || otrate < 0) {
        return res.status(400).json({ message: "Invalid 'otrate'." });
      }
      if (!paydate) {
        return res.status(400).json({ message: "Missing 'paydate'." });
      }
      if (!netsalary || isNaN(netsalary) || netsalary <= 0) {
        return res.status(400).json({ message: "Invalid 'netsalary'." });
      }
      if (!email || !/\S+@\S+\.\S+/.test(email)) {
        return res.status(400).json({ error: "Valid email is required" });
      }

      var difference = req.body.difference;
      var msg;

      //set message according the value of difference

      if (difference < 0) {
        difference = difference * -1;
        msg = "Your salary has decreased by Rs." + difference;
      } else {
        msg = "Your salary has increased by Rs." + difference;
      }

      //This variable is the object to update. This object will be passed to the record of the variable "Id" and the respective id is updated with these values in the object.

      try {
        const updateTransaction = { othrs, otrate, paydate, netsalary };
        await Salary.findByIdAndUpdate(Id, updateTransaction);
        logger.info(`Salary with ID ${Id} updated`);

        const transporter = nodemailer.createTransport({
          service: "gmail",
          auth: {
            user: process.env.EMAIL,
            pass: process.env.APP_PASSWORD,
          },
        });

        const mailOptions = {
          from: process.env.EMAIL,
          to: email,
          subject: "Change in salary",
          html: msg,
        };

        transporter.sendMail(mailOptions, (error, info) => {
          if (error) {
            logger.error("Error sending email: " + error.message);
            return res.status(500).json({ status: 500, error: error.message });
          }
          logger.info("Email sent: " + info.response);
          res.status(200).json({ status: 200, info });
        });
      } catch (error) {
        logger.error("Error updating salary: " + error.message);
        res.status(500).json({ status: 500, error: error.message });
      }
    }
  );

//Function to get the the salary details by their id

router
  .route("/getId/:id")
  .get([param("id").trim().escape()], async (req, res) => {
    let id = req.params.id; //get the id from the request(parameter)

    try {
      const salary = await Salary.findOne({ Id: `${id}` });
      if (salary) {
        logger.info(`Fetched salary details for ID ${id}`);
        res.status(200).json({ status: "Details fetched", salary });
      } else {
        logger.warn(`No salary details found for ID ${id}`);
        res.status(404).json({ status: "Salary details not found" });
      }
    } catch (err) {
      logger.error("Error fetching salary details by ID: " + err.message);
      res
        .status(500)
        .json({ status: "Error fetching details", error: err.message });
    }
  });

//Function to get the the salary details by their eid

router.route("/getEid/:id").get([param("id").trim().escape()], (req, res) => {
  let id = req.params.id; //get the id from the request(parameter)

  try {
    const salaries = Salary.find({ eid: `${id}` });
    logger.info(`Fetched salaries for employee ID ${id}`);
    res.status(200).json(salaries);
  } catch (err) {
    logger.error("Error fetching salaries by employee ID: " + err.message);
    res
      .status(500)
      .json({ status: "Error fetching salaries", error: err.message });
  }
});

router
  .route("/getTid/:id")
  .get([param("id").trim().escape()], async (req, res) => {
    let id = req.params.id; //get the id from the request(parameter)

    try {
      const salary = await Salary.findOne({ Id: `${id}` });
      if (salary) {
        logger.info(`Fetched salary details for transaction ID ${id}`);
        res.status(200).json({ status: "SE Details fetched", salary });
      } else {
        logger.warn(`No salary details found for transaction ID ${id}`);
        res.status(404).json({ status: "Details not found" });
      }
    } catch (err) {
      logger.error(
        "Error fetching salary details by transaction ID: " + err.message
      );
      res
        .status(500)
        .json({ status: "Error fetching details", error: err.message });
    }
  });

module.exports = router;
