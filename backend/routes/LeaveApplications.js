const router = require("express").Router();
const LeaveApplication = require("../models/leaveapplication"); //import leave application model
const Counter = require("../models/counter"); //import sales counter model
const SE = require("../models/salesexecutive"); //import sales executive model
const DD = require("../models/deliverydriver"); //import delivery driver model
const { body, param } = require("express-validator");
const rateLimit = require("express-rate-limit");
const helmet = require("helmet");
const logger = require("../utils/logger"); // Import logger
const csrf = require("csurf");

// CSRF Protection Middleware
const csrfProtection = csrf({
  cookie: {
    httpOnly: true,
    secure: process.env.NODE_ENV === "production", // Use HTTPS in production
    sameSite: "Strict",
  },
});

router.use(helmet());

const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: "Too many requests from this IP, please try again later.",
});

router.use(apiLimiter);

//CREATE - Create leaveapplication of delivery driver

router
  .route("/addladd")
  .post(
    [
      body("eid").trim().escape(),
      body("fullname").trim().escape(),
      body("title").trim().escape(),
      body("days").trim().escape(),
      body("startdate").trim().escape(),
      body("enddate").trim().escape(),
      body("reason").trim().escape(),
    ],
    (req, res) => {
      // get the body of the request and store the values in variables
      const eid = req.body.eid;
      const fullname = req.body.fullname;
      const title = req.body.title;
      const days = Number(req.body.days);
      const startdate = req.body.startdate;
      const enddate = req.body.enddate;
      const reason = req.body.reason;
      const status = "Pending";

      if (!eid || !fullname || !title || !startdate || !enddate || !reason) {
        return res.status(400).json({
          message:
            "ID, Full name, Title, Start Date, End Date, Reason are required",
        });
      }

      if (isNaN(days)) {
        return res.status(400).json({ message: "Days must be a number" });
      }

      if (startdate && !Date.parse(startdate)) {
        return res.status(400).json({ message: "Invalid start date format" });
      }
      if (enddate && !Date.parse(enddate)) {
        return res.status(400).json({ message: "Invalid end date format" });
      }

      if (reason && reason.length > 200) {
        return res
          .status(400)
          .json({ message: "Reason can be up to 200 characters" });
      }

      DD.findOne({ did: `${eid}` }, function (err, doc) {
        //check if the eid exists in the delivery driver table
        if (err) {
          logger.error(err);
          return res.status(404).json("No id");
        } else {
          const hasMatch = Boolean(doc); // convert to boolean value
          console.log(hasMatch); // will log 'true' if a matching document was found, otherwise 'false'
          if (hasMatch == true) {
            //if eid exists
            Counter.findOneAndUpdate(
              //autoincrement field
              { id: "autoval" },
              { $inc: { seq: 1 } },
              { new: true },
              (err, cd) => {
                console.log("Counter value", cd);
                let seqId;
                if (cd == null) {
                  const newval = new Counter({ id: "autoval", seq: 1 });
                  newval.save();
                  seqId = 1;
                } else {
                  seqId = cd.seq;
                }
                const Id = seqId; //set the autoincremented value as Id

                const newLeave = new LeaveApplication({
                  //creating object from leaveapplication model and assigning it to a const variable
                  Id,
                  eid,
                  fullname,
                  title,
                  days,
                  startdate,
                  enddate,
                  reason,
                  status,
                });

                newLeave
                  .save()
                  .then(() => {
                    //save the newly created object in the database using save function
                    logger.info(
                      "Leave application created successfully for delivery driver"
                    );
                    res.status(201).json("Success");
                  })
                  .catch((err) => {
                    //if unsuccess
                    logger.error(
                      `Error creating leave application for delivery driver: ${err.message}`
                    );
                    res.status(500).json("Failed");
                  });
              }
            );
          } else {
            //if eid doesn't exixts
            res.json("No id"); //send response
          }
        }
      });
    }
  );

//CREATE - Create leaveapplication of sales executive

router
  .route("/addlase")
  .post(
    [
      body("eid").trim().escape(),
      body("fullname").trim().escape(),
      body("title").trim().escape(),
      body("days").trim().escape(),
      body("startdate").trim().escape(),
      body("enddate").trim().escape(),
      body("reason").trim().escape(),
    ],
    (req, res) => {
      // get the body of the request and store the values in variables
      const eid = req.body.eid;
      const fullname = req.body.fullname;
      const title = req.body.title;
      const days = Number(req.body.days);
      const startdate = req.body.startdate;
      const enddate = req.body.enddate;
      const reason = req.body.reason;
      const status = "Pending";

      if (!eid || !fullname || !title || !startdate || !enddate || !reason) {
        return res.status(400).json({
          message:
            "ID, Full name, Title, Start Date, End Date, Reason are required",
        });
      }

      if (isNaN(days)) {
        return res.status(400).json({ message: "Days must be a number" });
      }

      if (startdate && !Date.parse(startdate)) {
        return res.status(400).json({ message: "Invalid start date format" });
      }
      if (enddate && !Date.parse(enddate)) {
        return res.status(400).json({ message: "Invalid end date format" });
      }

      if (reason && reason.length > 200) {
        return res
          .status(400)
          .json({ message: "Reason can be up to 200 characters" });
      }

      SE.findOne({ sid: `${eid}` }, function (err, doc) {
        //check if the sid exists in the delivery driver table
        if (err) {
          logger.error("Sales executive not found");
          return res.status(404).json("No id");
        } else {
          const hasMatch = Boolean(doc); // convert to boolean value
          console.log(hasMatch); // will log 'true' if a matching document was found, otherwise 'false'
          if (hasMatch == true) {
            //if eid exists
            Counter.findOneAndUpdate(
              //autoincrement field
              { id: "autoval" },
              { $inc: { seq: 1 } },
              { new: true },
              (err, cd) => {
                logger.info("Counter value", cd);
                let seqId;
                if (cd == null) {
                  const newval = new Counter({ id: "autoval", seq: 1 });
                  newval.save();
                  seqId = 1;
                } else {
                  seqId = cd.seq;
                }
                const Id = seqId; //set the autoincremented value as Id

                const newLeave = new LeaveApplication({
                  //creating object from leaveapplication model and assigning it to a const variable
                  Id,
                  eid,
                  fullname,
                  title,
                  days,
                  startdate,
                  enddate,
                  reason,
                  status,
                });

                newLeave
                  .save()
                  .then(() => {
                    //save the newly created object in the database using save function
                    logger.info(
                      "Leave application created successfully for sales executive"
                    );
                    res.status(201).json("Success");
                  })
                  .catch((err) => {
                    logger.error(
                      `Error creating leave application for sales executive: ${err.message}`
                    );
                    res.status(500).json("Failed");
                  });
              }
            );
          } else {
            //if eid doesn't exixts
            res.json("No id"); //send response
          }
        }
      });
    }
  );

//READ function - fetch data of all leaves

router.route("/getleaves").get(async (req, res) => {
  //get is used to retrieve data from database
  await LeaveApplication.find()
    .then((leaves) => {
      logger.info("Fetched all leave applications");
      res.status(200).json(leaves); //if success, then a response is sent to front end(response is all leaves)
    })
    .catch((err) => {
      //if unsuccess
      logger.error(`Error fetching leaves: ${err.message}`);
      res
        .status(422)
        .json({ status: "Error fetching leaves", error: err.message });
    });
});

//DELETE function

router
  .route("/deletela/:id")
  .delete([param("id").trim().escape()], async (req, res) => {
    let Id = req.params.id; //get the id from the request(parameter)
    await LeaveApplication.findByIdAndDelete(Id) //delete the leaveapplicationwith whose id = Id
      .then(() => {
        logger.info("Leave application deleted successfully");
        res.status(200).json("Success"); //send success message to the frontend
      })
      .catch((err) => {
        logger.error(`Error deleting leave application: ${err.message}`);
        res.status(500).json("Error");
      });
  });

//Function to get the the leave application details by their id

router
  .route("/getId/:id")
  .get([param("id").trim().escape()], async (req, res) => {
    try {
      const id = req.params.id;
      const leaveApplication = await LeaveApplication.findOne({ Id: id });
      if (!leaveApplication) {
        logger.info("Leave application not found");
        return res.status(404).json({ status: "Details not found" });
      }
      logger.info("Leave application details fetched successfully");
      res.status(200).json({ status: "Details fetched", leaveApplication });
    } catch (err) {
      logger.error(
        `Error fetching leave application details by Id: ${err.message}`
      );
      res
        .status(500)
        .json({ status: "Error fetching details", error: err.message });
    }
  });

//UPDATE function

router
  .route("/update/:id")
  .put(
    [param("id").trim().escape(), body("status").trim().escape()],
    async (req, res) => {
      try {
        const Id = req.params.id;
        const { status } = req.body;

        const updatedLeave = await LeaveApplication.findByIdAndUpdate(
          Id,
          { status },
          { new: true }
        );
        if (!updatedLeave) {
          logger.info("Leave application not found for update");
          return res.status(404).json("Leave application not found");
        }

        logger.info("Leave application status updated successfully");
        res.status(200).json("Done");
      } catch (err) {
        logger.error(`Error updating leave application: ${err.message}`);
        res.status(500).json("Failed");
      } //send status
    }
  );

//Function to get the the leave application details by  eid

router
  .route("/getEid/:id")
  .get([param("id").trim().escape()], async (req, res) => {
    try {
      const id = req.params.id;
      const leaveApplications = await LeaveApplication.find({ eid: id });
      logger.info("Leave applications fetched by eid");
      res.status(200).json(leaveApplications);
    } catch (err) {
      logger.error(`Error fetching leave applications by eid: ${err.message}`);
      res.status(500).json("Error");
    }
  });

module.exports = router;
