const router = require("express").Router();
let Order = require("../models/Order");
const { body, param } = require("express-validator");
const rateLimit = require("express-rate-limit");
const helmet = require("helmet");
const logger = require("../utils/logger.js");

router.use(helmet());

const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: "Too many requests from this IP, please try again later.",
});

router.use(apiLimiter);

router
  .route("/addorder")
  .post(
    [
      body("OrderNo").trim().escape(),
      body("ProductName").trim().escape(),
      body("Address").trim().escape(),
      body("Email").trim().escape(),
      body("Price").trim().escape(),
      body("Status").trim().escape(),
    ],
    (req, res) => {
      const OrderNo = req.body.OrderNo;
      const ProductName = req.body.ProductName;
      const Address = req.body.Address;
      const Email = req.body.Email;
      const Price = Number(req.body.Price);
      const Status = req.body.Status;

      if (!OrderNo) {
        return res.status(400).json({ message: "OrderNo is required" });
      }
      if (!ProductName) {
        return res.status(400).json({ message: "ProductName is required" });
      }
      if (!Address) {
        return res.status(400).json({ message: "Address is required" });
      }
      if (!Email) {
        return res.status(400).json({ message: "Email is required" });
      }
      if (!Price) {
        return res.status(400).json({ message: "Price is required" });
      }
      if (isNaN(Number(Price))) {
        return res.status(400).json({ message: "Price must be a number" });
      }
      if (!Status) {
        return res.status(400).json({ message: "Status is required" });
      }

      const newOrder = new Order({
        OrderNo,
        ProductName,
        Address,
        Email,
        Price,
        Status,
      });

      try {
        newOrder.save();
        logger.info("Order added successfully");
        res.status(201).json({ message: "Order Added" });
      } catch (err) {
        logger.error("Error adding order: " + err.message);
        res
          .status(500)
          .json({ message: "Error adding order", error: err.message });
      }
    }
  );

//Display Orders
router.route("/order").get(async (req, res) => {
  try {
    const orders = await Order.find();
    logger.info("Fetched all orders" + orders);
    res.status(200).json(orders);
  } catch (err) {
    logger.error("Error fetching orders: " + err.message);
    res
      .status(500)
      .json({ message: "Error fetching orders", error: err.message });
  }
});

//Update Order
router
  .route("/updateorder/:id")
  .put(
    [param("id").trim().escape(), body("Status").trim().escape()],
    async (req, res) => {
      let orderId = req.params.id;

      const { OrderNo, ProductName, Address, Email, Price, Status } = req.body;

      if (!orderId) {
        return res.status(400).json({ message: "Order ID is required" });
      }
      if (OrderNo && typeof OrderNo !== "string") {
        return res.status(400).json({ message: "OrderNo must be a string" });
      }
      if (ProductName && typeof ProductName !== "string") {
        return res
          .status(400)
          .json({ message: "ProductName must be a string" });
      }
      if (Address && typeof Address !== "string") {
        return res.status(400).json({ message: "Address must be a string" });
      }
      if (Email && !/^\S+@\S+\.\S+$/.test(Email)) {
        return res.status(400).json({ message: "Invalid email format" });
      }
      if (Price && isNaN(Number(Price))) {
        return res.status(400).json({ message: "Price must be a number" });
      }
      if (Status && typeof Status !== "string") {
        return res.status(400).json({ message: "Status must be a string" });
      }
      const updateorder = {
        OrderNo,
        ProductName,
        Address,
        Email,
        Price,
        Status,
      };

      try {
        const updatedOrder = await Order.findByIdAndUpdate(
          orderId,
          updateOrder,
          { new: true }
        );
        if (updatedOrder) {
          logger.info("Order updated successfully");
          res
            .status(200)
            .json({ message: "Order updated", order: updatedOrder });
        } else {
          logger.warn("Order not found");
          res.status(404).json({ message: "Order not found" });
        }
      } catch (err) {
        logger.error("Error updating order: " + err.message);
        res
          .status(500)
          .json({ message: "Error updating order", error: err.message });
      }
    }
  );

router
  .route("/deleteorder/:id")
  .delete([param("id").trim().escape()], async (req, res) => {
    let orderId = req.params.id;

    try {
      const deletedOrder = await Order.findByIdAndDelete(orderId);
      if (deletedOrder) {
        logger.info("Order deleted successfully");
        res.status(200).json({ message: "Order deleted" });
      } else {
        logger.warn("Order not found");
        res.status(404).json({ message: "Order not found" });
      }
    } catch (err) {
      logger.error("Error deleting order: " + err.message);
      res
        .status(500)
        .json({ message: "Error deleting order", error: err.message });
    }
  });

//UPDATING THE STATUS OF A SPECIFIC ORDER.

router
  .route("/updateOrder/:id")
  .put(
    [param("id").trim().escape(), body("Status").trim().escape()],
    async (req, res) => {
      let orderId = req.params.id;

      const Status = req.body.Quantity;
      if (!orderId) {
        return res.status(400).json({ message: "Order ID is required" });
      }
      if (!Status) {
        return res.status(400).json({ message: "Status is required" });
      }

      try {
        const updatedStatus = await Order.findByIdAndUpdate(
          orderId,
          { Status },
          { new: true }
        );
        if (updatedStatus) {
          logger.info("Order status updated successfully");
          res.status(200).json({ message: "Status updated" });
        } else {
          logger.warn("Order not found");
          res.status(404).json({ message: "Order not found" });
        }
      } catch (err) {
        logger.error("Error updating order status: " + err.message);
        res
          .status(500)
          .json({ message: "Error updating order status", error: err.message });
      }
    }
  );

//get one user
router
  .route("/getorder/:id")
  .get([param("id").trim().escape()], async (req, res) => {
    let orderId = req.params.id;

    try {
      const order = await Order.findById(orderId);
      if (order) {
        logger.info("Order fetched successfully");
        res.status(200).json({ message: "Order fetched", order });
      } else {
        logger.warn("Order not found");
        res.status(404).json({ message: "Order not found" });
      }
    } catch (err) {
      logger.error("Error fetching order: " + err.message);
      res
        .status(500)
        .json({ message: "Error fetching order", error: err.message });
    }
  });

router.get("/search/:key", async (req, res) => {
  try {
    const result = await Order.find({
      $or: [
        {
          OrderNo: { $regex: req.params.key },
        },
        {
          ProductName: { $regex: req.params.key },
        },
      ],
    });
    logger.info("Search completed");
    res.status(200).json(result);
  } catch (err) {
    logger.error("Error searching orders: " + err.message);
    res
      .status(500)
      .json({ message: "Error searching orders", error: err.message });
  }
});

module.exports = router;
