const router = require("express").Router();
const { response } = require("express");
let Supplier = require("../models/Supplier");
const { body, param } = require("express-validator");
const rateLimit = require("express-rate-limit");
const helmet = require("helmet");
const logger = require("../utils/logger.js");

router.use(helmet());

const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: "Too many requests from this IP, please try again later.",
});

router.use(apiLimiter);

router
  .route("/addsupplier")
  .post(
    [
      body("name").trim().escape(),
      body("address").trim().escape(),
      body("contactNumber").trim().escape(),
      body("email").trim().escape(),
      body("productsSupplied").trim().escape(),
    ],
    (req, res) => {
      const { name, address, contactNumber, email, productsSupplied } =
        req.body;

      if (!name || !address || !contactNumber || !email || !productsSupplied) {
        return res.status(400).json({ message: "All fields are required" });
      }
      if (!/^\S+@\S+\.\S+$/.test(email)) {
        return res.status(400).json({ message: "Invalid email format" });
      }
      if (!/^\d{10}$/.test(contactNumber)) {
        return res
          .status(400)
          .json({ message: "Invalid contact number format" });
      }

      const newSupplier = new Supplier({
        name,
        address,
        contactNumber,
        email,
        productsSupplied,
      });

      try {
        newSupplier.save();
        logger.info(`Supplier added: ${name}`);
        res.status(201).json({ message: "Supplier Added" });
      } catch (err) {
        logger.error("Error adding supplier: " + err.message);
        res
          .status(500)
          .json({ status: "Error with adding supplier", error: err.message });
      }
    }
  );
//read details
router.route("/supplier").get(async (req, res) => {
  try {
    const suppliers = await Supplier.find();
    logger.info("Fetched all suppliers");
    res.status(200).json(suppliers);
  } catch (err) {
    logger.error("Error fetching suppliers: " + err.message);
    res
      .status(500)
      .json({ status: "Error with fetching suppliers", error: err.message });
  }
});
//delete details
router
  .route("/deletesupplier/:id")
  .delete([param("id").trim().escape()], async (req, res) => {
    let userId = req.params.id;

    if (!userId) {
      return res.status(400).json({ message: "Supplier ID is required" });
    }

    await Supplier.findByIdAndDelete(userId)
      .then(() => {
        logger.info(`Supplier with ID ${userId} deleted`);
        res.status(200).json({ status: "Supplier deleted" });
      })
      .catch((err) => {
        logger.error("Error deleting supplier: " + err.message);
        res
          .status(500)
          .json({ status: "Error with deleting supplier", error: err.message });
      });
  });

router.route("/search/searchsupplier/:keyword").get(async (req, res) => {
  let keyword = req.params.keyword;
  try {
    const suppliers = await Supplier.find({ name: new RegExp(keyword, "i") });
    logger.info(`Searched suppliers with keyword: ${keyword}`);
    res.status(200).json(suppliers);
  } catch (err) {
    logger.error("Error searching suppliers: " + err.message);
    res
      .status(500)
      .json({ status: "Error with searching suppliers", error: err.message });
  }
});

// update supplier data
router
  .route("/updatesupplier/:id")
  .put([param("id").trim().escape()], async (req, res) => {
    let userId = req.params.id;

    if (!userId) {
      return res.status(400).json({ message: "Supplier ID is required" });
    }

    const { name, address, contactNumber, email, productsSupplied } = req.body;

    if (!name || !address || !contactNumber || !email || !productsSupplied) {
      return res.status(400).json({ message: "All fields are required" });
    }
    if (!/^\S+@\S+\.\S+$/.test(email)) {
      return res.status(400).json({ message: "Invalid email format" });
    }
    if (!/^\d{10}$/.test(contactNumber)) {
      return res.status(400).json({ message: "Invalid contact number format" });
    }

    const updateSupplier = {
      name,
      address,
      contactNumber,
      email,
      productsSupplied,
    };
    try {
      await Supplier.findByIdAndUpdate(userId, updateSupplier, { new: true });
      logger.info(`Supplier with ID ${userId} updated`);
      res.status(200).json({ status: "Supplier updated" });
    } catch (err) {
      logger.error("Error updating supplier: " + err.message);
      res
        .status(500)
        .json({ status: "Error with updating supplier", error: err.message });
    }
  });
//get one user
router
  .route("/getsupplier/:id")
  .get([param("id").trim().escape()], async (req, res) => {
    let userId = req.params.id;

    if (!userId) {
      return res.status(400).json({ message: "Supplier ID is required" });
    }

    try {
      const supplier = await Supplier.findById(userId);
      if (supplier) {
        logger.info(`Fetched supplier with ID ${userId}`);
        res.status(200).json({ status: "Supplier fetched", supplier });
      } else {
        logger.warn(`No supplier found with ID ${userId}`);
        res.status(404).json({ status: "Supplier not found" });
      }
    } catch (err) {
      logger.error("Error fetching supplier: " + err.message);
      res
        .status(500)
        .json({ status: "Error with fetching supplier", error: err.message });
    }
  });

router.get("/search/:key", async (req, res) => {
  const key = req.params.key;

  try {
    const result = await SupplierTransaction.find({
      $or: [
        {
          InvoiceNo: { $regex: req.params.key },
        },
        {
          ProductName: { $regex: req.params.key },
        },
        {
          Supplier: { $regex: req.params.key },
        },
      ],
    });
    logger.info(`Searched supplier transactions with key: ${key}`);
    res.status(200).json(result);
  } catch (err) {
    logger.error("Error searching supplier transactions: " + err.message);
    res.status(500).json({
      status: "Error with searching supplier transactions",
      error: err.message,
    });
  }
});

module.exports = router;
