const router = require("express").Router();
const DeliveryDriver = require("../models/deliverydriver"); //import delivery driver model
const bcrypt = require("bcrypt");
const { isISO8601 } = require("validator");
const nodemailer = require("nodemailer");
const sanitizeHtml = require("sanitize-html");
const { body, param } = require("express-validator");
const rateLimit = require("express-rate-limit");
const helmet = require("helmet");
const logger = require("../utils/logger.js");

router.use(helmet());

const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: "Too many requests from this IP, please try again later.",
});

router.use(apiLimiter);

//CREATE function - create/adding a deliverydriver
const isValidNIC = (nic) => /^\d{12}$/.test(nic);
const isValidLicenseNo = (licenseno) => /^\d{10}$/.test(licenseno);
const isPositiveNumber = (value) => !isNaN(value) && value > 0;

router.post(
  "/adddd",
  [
    body("did").trim().escape(),
    body("fullname").trim().escape(),
    body("email").trim().escape(),
    body("password").trim().escape(),
    body("address").trim().escape(),
    body("phone").trim().escape(),
    body("dob").trim().escape(),
    body("licenseno").trim().escape(),
    body("vehicleno").trim().escape(),
    body("nic").trim().escape(),
    body("basicsalary").trim().escape(),
  ],
  async (req, res) => {
    // get the body of the request and store the values in variables
    const {
      did,
      fullname,
      email,
      password,
      address,
      phone,
      dob,
      licenseno,
      vehicleno,
      nic,
      basicsalary,
      image,
    } = req.body;
    const msg = `You are now an employee of LuxuryX. Your username is ${sanitizeHtml(
      email
    )} and password is ${password}`;

    if (!did || did.trim().length === 0) {
      return res.status(400).json({ error: "Driver ID is required" });
    }
    if (!fullname || fullname.trim().length === 0) {
      return res.status(400).json({ error: "Full name is required" });
    }
    if (!email || !/\S+@\S+\.\S+/.test(email)) {
      return res.status(400).json({ error: "Valid email is required" });
    }
    if (!password || password.length < 6) {
      return res
        .status(400)
        .json({ error: "Password must be at least 6 characters long" });
    }
    if (!address || address.trim().length === 0) {
      return res.status(400).json({ error: "Address is required" });
    }
    if (!phone || isNaN(Number(phone))) {
      return res.status(400).json({ error: "Phone number must be numeric" });
    }
    if (!dob || !Date.parse(dob)) {
      return res.status(400).json({ error: "Valid date of birth is required" });
    }
    if (!licenseno || licenseno.trim().length === 0) {
      return res.status(400).json({ error: "License number is required" });
    }
    if (!isValidLicenseNo(licenseno)) {
      return res
        .status(400)
        .json({
          error: "License Number must be exactly 10 digits and numeric",
        });
    }
    if (!vehicleno || vehicleno.trim().length === 0) {
      return res.status(400).json({ error: "Vehicle number is required" });
    }
    if (!nic || nic.trim().length === 0) {
      return res.status(400).json({ error: "NIC is required" });
    }
    if (!isValidNIC(nic)) {
      return res
        .status(400)
        .json({ error: "NIC must be exactly 12 digits and numeric" });
    }
    if (!basicsalary || !isPositiveNumber(Number(basicsalary))) {
      return res.status(400).json({ error: "Valid basic salary is required" });
    }

    try {
      const preuser = await DeliveryDriver.findOne({ email: email }); // Check if email already exists
      const useId = await DeliveryDriver.findOne({ did: did }); // Check if did already exists

      if (preuser) {
        logger.warn(`Email ${email} is already taken`);
        return res.status(400).json({ message: "Email is already taken" });
      } else if (useId) {
        logger.info("ID already taken");
        return res.status(400).json({ message: "DID is already taken" });      }

      // Send email
      try {
        const transporter = nodemailer.createTransport({
          service: "gmail",
          auth: {
            user: process.env.EMAIL,
            pass: process.env.APP_PASSWORD,
          },
        });

        const mailOptions = {
          from: process.env.EMAIL,
          to: email,
          subject: "Congratulations!",
          html: msg,
        };

        await transporter.sendMail(mailOptions);
        logger.info("Email sent successfully");
      } catch (error) {
        logger.error(`Error sending email: ${error.message}`);
        return res.status(500).json({ status: 500, error: error.message });
      }

      // Hash password and save new delivery driver
      const hashedPassword = await bcrypt.hash(password, 12);
      const newDeliveryDriver = new DeliveryDriver({
        did,
        fullname,
        email,
        password: hashedPassword,
        address,
        phone,
        dob,
        licenseno,
        vehicleno,
        nic,
        basicsalary,
        image,
      });

      await newDeliveryDriver.save();
      logger.info("New delivery driver added successfully");
      res.status(201).json(newDeliveryDriver);
    } catch (error) {
      logger.error(`Error adding delivery driver: ${error.message}`);
      res.status(422).json({ status: 422, error: error.message });
    }
  }
);

//READ function - fetch data of all deliverydrivers

router.route("/getdd").get(async (req, res) => {
  try {
    const deliveryDrivers = await DeliveryDriver.find();
    logger.info("Fetched all delivery drivers");
    res.status(200).json(deliveryDrivers);
  } catch (err) {
    logger.error(`Error fetching delivery drivers: ${err.message}`);
    res.status(500).json({ status: 500, error: err.message });
  }
});

//DELETE function

router
  .route("/deletedd/:id")
  .delete([param("id").trim().escape()], async (req, res) => {
    const id = req.params.id;
    try {
      const result = await DeliveryDriver.findByIdAndDelete(id);
      if (!result) {
        logger.info("Delivery driver not found");
        return res.status(404).json("Delivery driver not found");
      }
      logger.info("Delivery driver deleted successfully");
      res.status(200).json("Delivery driver deleted successfully");
    } catch (err) {
      logger.error(`Error deleting delivery driver: ${err.message}`);
      res.status(500).json({ status: 500, error: err.message });
    }
  });

//Function to get the the deliverydriver details by their did

router
  .route("/getDid/:id")
  .get([param("id").trim().escape()], async (req, res) => {
    let id = req.params.id; //get the id from the request(parameter)

    try {
      const deliveryDriver = await DeliveryDriver.findOne({ did: id });
      if (!deliveryDriver) {
        logger.info("Delivery driver not found");
        return res.status(404).json({ status: "Delivery driver not found" });
      }
      logger.info("Delivery driver details fetched successfully");
      res
        .status(200)
        .json({ status: "Delivery driver details fetched", deliveryDriver });
    } catch (err) {
      logger.error(`Error fetching delivery driver details: ${err.message}`);
      res
        .status(500)
        .json({
          status: "Error fetching delivery driver details",
          error: err.message,
        });
    }
  });

// UPDATE function
router
  .route("/update/:id")
  .put([param("id").trim().escape()], async (req, res) => {
    const Id = req.params.id; // get the id from the request (parameter)

    // get the body of the request and store the values in variables
    const {
      fullname,
      email,
      address,
      phone,
      dob,
      licenseno,
      vehicleno,
      nic,
      basicsalary,
    } = req.body;

    if (!fullname || fullname.trim().length === 0) {
      return res.status(400).json({ error: "Full name is required" });
    }
    if (!email || !/\S+@\S+\.\S+/.test(email)) {
      return res.status(400).json({ error: "Valid email is required" });
    }
    if (!address || address.trim().length === 0) {
      return res.status(400).json({ error: "Address is required" });
    }
    if (!phone || isNaN(Number(phone))) {
      return res.status(400).json({ error: "Phone number must be numeric" });
    }
    if (!dob || !Date.parse(dob)) {
      return res.status(400).json({ error: "Valid date of birth is required" });
    }
    if (!licenseno || licenseno.trim().length === 0) {
      return res.status(400).json({ error: "License number is required" });
    }
    if (!isValidLicenseNo(licenseno)) {
      return res
        .status(400)
        .json({
          error: "License Number must be exactly 10 digits and numeric",
        });
    }
    if (!vehicleno || vehicleno.trim().length === 0) {
      return res.status(400).json({ error: "Vehicle number is required" });
    }
    if (!nic || nic.trim().length === 0) {
      return res.status(400).json({ error: "NIC is required" });
    }
    if (!isValidNIC(nic)) {
      return res
        .status(400)
        .json({ error: "NIC must be exactly 12 digits and numeric" });
    }
    if (!basicsalary || !isPositiveNumber(Number(basicsalary))) {
      return res.status(400).json({ error: "Valid basic salary is required" });
    }

    const updateDeliveryDriver = {
      // fetch the retrieved info to a variable
      fullname,
      email,
      address,
      phone,
      dob,
      licenseno,
      vehicleno,
      nic,
      basicsalary,
    };

    try {
      const updatedDriver = await DeliveryDriver.findByIdAndUpdate(
        id,
        updateDeliveryDriver,
        { new: true }
      );
      if (!updatedDriver) {
        logger.info("Delivery driver not found");
        return res.status(404).json("Delivery driver not found");
      }
      logger.info("Delivery driver updated successfully");
      res
        .status(200)
        .json({
          status: "Delivery driver updated successfully",
          updatedDriver,
        });
    } catch (err) {
      logger.error(`Error updating delivery driver: ${err.message}`);
      res
        .status(500)
        .json({ status: "Error updating delivery driver", error: err.message });
    }
  });

module.exports = router;
