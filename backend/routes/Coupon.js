const router = require("express").Router();
let coupon = require("../models/Coupon");
const { body, param } = require("express-validator");
const { isISO8601 } = require("validator");
const rateLimit = require("express-rate-limit");
const helmet = require("helmet");
const logger = require("../utils/logger.js");
const csrf = require("csurf");

// CSRF Protection Middleware
const csrfProtection = csrf({
  cookie: {
    httpOnly: true,
    secure: process.env.NODE_ENV === "production", // Use HTTPS in production
    sameSite: "Strict",
  },
});

router.use(helmet());

const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: "Too many requests from this IP, please try again later.",
});

router.use(apiLimiter);

router
  .route("/addcoupon")
  .post(
    [
      body("code").trim().escape(),
      body("expiryDate").trim().escape(),
      body("usageLimit").trim().escape(),
      body("usedCount").trim().escape(),
      body("discountPercentage").trim().escape(),
      body("product").trim().escape(),
    ],
    csrfProtection,
    (req, res) => {
      const code = req.body.code;
      const expiryDate = req.body.expiryDate;
      const usageLimit = req.body.usageLimit;
      const usedCount = req.body.usedCount;
      const discountPercentage = Number(req.body.discountPercentage);
      const product = req.body.product;

      if (!code || code.trim().length === 0) {
        return res.status(400).json({ error: "Code is required" });
      }

      if (!expiryDate || !isISO8601(expiryDate)) {
        return res
          .status(400)
          .json({ error: "Invalid or missing expiry date" });
      }

      if (!usageLimit || isNaN(usageLimit) || usageLimit <= 0) {
        return res
          .status(400)
          .json({ error: "Usage limit must be a positive integer" });
      }

      if (!usedCount || isNaN(usedCount) || usedCount < 0) {
        return res
          .status(400)
          .json({ error: "Used count must be a non-negative integer" });
      }

      if (
        discountPercentage === undefined ||
        isNaN(discountPercentage) ||
        discountPercentage < 0 ||
        discountPercentage > 100
      ) {
        return res
          .status(400)
          .json({ error: "Discount percentage must be between 0 and 100" });
      }

      if (!product || product.trim().length === 0) {
        return res.status(400).json({ error: "Product is required" });
      }

      const newCoupon = new coupon({
        code,
        expiryDate,
        usageLimit,
        usedCount,
        discountPercentage,
        product,
      });

      newCoupon
        .save()
        .then(() => {
          res.json("Coupon details added!");
          logger.info("Coupon added successfully");
        })
        .catch((err) => {
          logger.error("Error adding coupon: ", err);
          res.status(500).send("Error adding coupon");
        });
    }
  );

//Display Coupon Details
router.route("/coupon").get((req, res) => {
  coupon
    .find()
    .then((coupons) => {
      res.json(coupons);
      logger.info("Coupons fetched successfully");
    })
    .catch((err) => {
      logger.error("Error fetching coupons: ", err);
      res.status(500).send("Error fetching coupons");
    });
});

//Update Details
router
  .route("/updatecoupon/:id")
  .put(
    [
      param("id").trim().escape(),
      body("code").trim().escape(),
      body("expiryDate").trim().escape(),
      body("usageLimit").trim().escape(),
      body("usedCount").trim().escape(),
      body("discountPercentage").trim().escape(),
      body("product").trim().escape(),
    ],
    async (req, res) => {
      let couponId = req.params.id;

      const {
        code,
        expiryDate,
        usageLimit,
        usedCount,
        discountPercentage,
        product,
      } = req.body;

      if (!code || code.trim().length === 0) {
        return res.status(400).json({ error: "Code is required" });
      }

      if (!expiryDate || !isISO8601(expiryDate)) {
        return res
          .status(400)
          .json({ error: "Invalid or missing expiry date" });
      }

      if (!usageLimit || isNaN(usageLimit) || usageLimit <= 0) {
        return res
          .status(400)
          .json({ error: "Usage limit must be a positive integer" });
      }

      if (!usedCount || isNaN(usedCount) || usedCount < 0) {
        return res
          .status(400)
          .json({ error: "Used count must be a non-negative integer" });
      }

      if (
        discountPercentage === undefined ||
        isNaN(discountPercentage) ||
        discountPercentage < 0 ||
        discountPercentage > 100
      ) {
        return res
          .status(400)
          .json({ error: "Discount percentage must be between 0 and 100" });
      }

      if (!product || product.trim().length === 0) {
        return res.status(400).json({ error: "Product is required" });
      }

      const updateCoupon = {
        code,
        expiryDate,
        usageLimit,
        usedCount,
        discountPercentage,
        product,
      };

      try {
        const update = await coupon.findByIdAndUpdate(couponId, updateCoupon);

        res.status(200).send({ status: "Data is updated", coupon: update });
        logger.info(`Coupon with ID: ${couponId} updated successfully`);
      } catch (err) {
        logger.error("Error updating coupon: ", err);
        res.status(500).send("Error updating coupon");
      }
    }
  );

router
  .route("/deletecoupon/:id")
  .delete([param("id").trim().escape()], async (req, res) => {
    let couponId = req.params.id;

    await coupon
      .findByIdAndDelete(couponId)
      .then(() => {
        res.status(200).send({ status: "Delete details" });
        logger.info(`Coupon with ID: ${couponId} deleted successfully`);
      })
      .catch((err) => {
        logger.error("Error deleting coupon: ", err);
        res
          .status(500)
          .send({ status: "Error with deleting data", error: err.message });
      });
  });

//get details of single transaction by invoice no
router.route("/getcoupon/:code").get((req, res) => {
  let codeS = req.params.code;

  try {
    const couponData = coupon.findOne({ code: codeS });
    if (!couponData) {
      logger.error(`Coupon with code: ${codeS} not found`);
      return res.status(404).send({ status: "Coupon not found" });
    }
    res.status(200).send({ status: "Coupon fetched", coupon: couponData });
    logger.info(`Coupon with code: ${codeS} fetched successfully`);
  } catch (err) {
    logger.error("Error fetching coupon by code: ", err);
    res.status(500).send({ status: "Error with Coupon", error: err.message });
  }
});

router.get("/search/:key", async (req, res) => {
  try {
    let result = await coupon.find({
      $or: [
        {
          code: { $regex: req.params.key },
        },
        {
          product: { $regex: req.params.key },
        },
        {
          usedCount: { $regex: req.params.key },
        },
      ],
    });
    res.send(result);
    logger.info(`Coupons search result for key: ${searchKey}`);
  } catch (err) {
    logger.error("Error searching coupons: ", err);
    res.status(500).send("Error searching coupons");
  }
});

module.exports = router;
