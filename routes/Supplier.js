const router = require("express").Router();
const Supplier = require("../models/Supplier");
const logger = require('../utils/logger.js'); // Ensure you have a logger utility

// CREATE - Add a new supplier
router.post("/addsupplier", async (req, res) => {
    const { name, address, contactNumber, email, productsSupplied } = req.body;

    const newSupplier = new Supplier({
        name,
        address,
        contactNumber,
        email,
        productsSupplied
    });

    try {
        await newSupplier.save();
        logger.info(`Supplier added: ${name}`);
        res.status(201).json({ message: "Supplier Added" });
    } catch (err) {
        logger.error('Error adding supplier: ' + err.message);
        res.status(500).json({ status: "Error with adding supplier", error: err.message });
    }
});

// READ - Fetch all suppliers
router.get("/supplier", async (req, res) => {
    try {
        const suppliers = await Supplier.find();
        logger.info('Fetched all suppliers');
        res.status(200).json(suppliers);
    } catch (err) {
        logger.error('Error fetching suppliers: ' + err.message);
        res.status(500).json({ status: "Error with fetching suppliers", error: err.message });
    }
});

// DELETE - Delete a supplier by ID
router.delete("/deletesupplier/:id", async (req, res) => {
    const userId = req.params.id;

    try {
        await Supplier.findByIdAndDelete(userId);
        logger.info(`Supplier with ID ${userId} deleted`);
        res.status(200).json({ status: "Supplier deleted" });
    } catch (err) {
        logger.error('Error deleting supplier: ' + err.message);
        res.status(500).json({ status: "Error with deleting supplier", error: err.message });
    }
});

// SEARCH - Search suppliers by name
router.get("/search/searchsupplier/:keyword", async (req, res) => {
    const keyword = req.params.keyword;

    try {
        const suppliers = await Supplier.find({ "name": new RegExp(keyword, 'i') });
        logger.info(`Searched suppliers with keyword: ${keyword}`);
        res.status(200).json(suppliers);
    } catch (err) {
        logger.error('Error searching suppliers: ' + err.message);
        res.status(500).json({ status: "Error with searching suppliers", error: err.message });
    }
});

// UPDATE - Update supplier data by ID
router.put("/updatesupplier/:id", async (req, res) => {
    const userId = req.params.id;
    const { name, address, contactNumber, email, productsSupplied } = req.body;

    const updateSupplier = {
        name,
        address,
        contactNumber,
        email,
        productsSupplied
    };

    try {
        await Supplier.findByIdAndUpdate(userId, updateSupplier, { new: true });
        logger.info(`Supplier with ID ${userId} updated`);
        res.status(200).json({ status: "Supplier updated" });
    } catch (err) {
        logger.error('Error updating supplier: ' + err.message);
        res.status(500).json({ status: "Error with updating supplier", error: err.message });
    }
});

// READ - Get supplier details by ID
router.get("/getsupplier/:id", async (req, res) => {
    const userId = req.params.id;

    try {
        const supplier = await Supplier.findById(userId);
        if (supplier) {
            logger.info(`Fetched supplier with ID ${userId}`);
            res.status(200).json({ status: "Supplier fetched", supplier });
        } else {
            logger.warn(`No supplier found with ID ${userId}`);
            res.status(404).json({ status: "Supplier not found" });
        }
    } catch (err) {
        logger.error('Error fetching supplier: ' + err.message);
        res.status(500).json({ status: "Error with fetching supplier", error: err.message });
    }
});

// SEARCH - Search for supplier transactions (if applicable)
router.get("/search/:key", async (req, res) => {
    const key = req.params.key;

    try {
        const result = await SupplierTransaction.find({
            $or: [
                {
                    InvoiceNo: { $regex: req.params.key },
                  },
                  {
                    ProductName: { $regex: req.params.key },
                  },
                  {
                    Supplier: { $regex: req.params.key },
                  },
            ]
        });
        logger.info(`Searched supplier transactions with key: ${key}`);
        res.status(200).json(result);
    } catch (err) {
        logger.error('Error searching supplier transactions: ' + err.message);
        res.status(500).json({ status: "Error with searching supplier transactions", error: err.message });
    }
});

module.exports = router;
