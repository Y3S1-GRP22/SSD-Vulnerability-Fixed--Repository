const router = require("express").Router();
const SupplierTransaction = require("../models/SupplierTransaction");
const logger = require('../utils/logger.js'); // Ensure you have a logger utility

// CREATE - Add a new supplier transaction
router.post("/addsupplierTransaction", async (req, res) => {
    const { InvoiceNo, SuppliedDate, Supplier, ProductName, Quantity, Amount } = req.body;

    const newSupplierTransaction = new SupplierTransaction({
        InvoiceNo,
        SuppliedDate,
        Supplier,
        ProductName,
        Quantity,
        Amount
    });

    try {
        await newSupplierTransaction.save();
        logger.info(`Supplier transaction added: ${InvoiceNo}`);
        res.status(201).json({ message: "Supplier Transaction Added" });
    } catch (err) {
        logger.error('Error adding supplier transaction: ' + err.message);
        res.status(500).json({ status: "Error with adding supplier transaction", error: err.message });
    }
});

// READ - Fetch all supplier transactions
router.get("/supplierTransaction", async (req, res) => {
    try {
        const supplierTransactions = await SupplierTransaction.find();
        logger.info('Fetched all supplier transactions');
        res.status(200).json(supplierTransactions);
    } catch (err) {
        logger.error('Error fetching supplier transactions: ' + err.message);
        res.status(500).json({ status: "Error with fetching supplier transactions", error: err.message });
    }
});

// UPDATE - Update a supplier transaction by ID
router.put("/updatesupplierTransaction/:id", async (req, res) => {
    const supplierTransactionId = req.params.id;
    const { InvoiceNo, SuppliedDate, Supplier, ProductName, Quantity, Amount } = req.body;

    const updateSupplierTransaction = {
        InvoiceNo,
        SuppliedDate,
        Supplier,
        ProductName,
        Quantity,
        Amount
    };

    try {
        const updatedTransaction = await SupplierTransaction.findByIdAndUpdate(supplierTransactionId, updateSupplierTransaction, { new: true });
        logger.info(`Supplier transaction with ID ${supplierTransactionId} updated`);
        res.status(200).json({ status: "Supplier Transaction updated", supplierTransaction: updatedTransaction });
    } catch (err) {
        logger.error('Error updating supplier transaction: ' + err.message);
        res.status(500).json({ status: "Error with updating supplier transaction", error: err.message });
    }
});

// DELETE - Delete a supplier transaction by ID
router.delete("/deletesupplierTransaction/:id", async (req, res) => {
    const supplierTransactionId = req.params.id;

    try {
        await SupplierTransaction.findByIdAndDelete(supplierTransactionId);
        logger.info(`Supplier transaction with ID ${supplierTransactionId} deleted`);
        res.status(200).json({ status: "Supplier Transaction deleted" });
    } catch (err) {
        logger.error('Error deleting supplier transaction: ' + err.message);
        res.status(500).json({ status: "Error with deleting supplier transaction", error: err.message });
    }
});

// READ - Get supplier transaction details by InvoiceNo
router.get("/getsupplierTransaction/:InvoiceNo", async (req, res) => {
    const InvoiceNoS = req.params.InvoiceNo;

    try {
        const supplierTransaction = await SupplierTransaction.find({ "InvoiceNo": InvoiceNoS });
        if (supplierTransaction.length > 0) {
            logger.info(`Supplier transaction with InvoiceNo ${InvoiceNoS} fetched`);
            res.status(200).json({ status: "Supplier Transaction fetched", supplierTransaction });
        } else {
            logger.warn(`No supplier transaction found with InvoiceNo ${InvoiceNoS}`);
            res.status(404).json({ status: "Supplier Transaction not found" });
        }
    } catch (err) {
        logger.error('Error fetching supplier transaction: ' + err.message);
        res.status(500).json({ status: "Error with fetching supplier transaction", error: err.message });
    }
});

// READ - Get supplier transaction details by ProductName
router.get("/getsupplierTransactionProductName/:productName", async (req, res) => {
    const productName = req.params.productName;

    try {
        const supplierTransaction = await SupplierTransaction.findOne({ "ProductName": productName });
        if (supplierTransaction) {
            logger.info(`Supplier transaction with ProductName ${productName} fetched`);
            res.status(200).json({ status: "Supplier Transaction Details fetched", supplierTransaction });
        } else {
            logger.warn(`No supplier transaction found with ProductName ${productName}`);
            res.status(404).json({ status: "Supplier Transaction not found" });
        }
    } catch (err) {
        logger.error('Error fetching supplier transaction: ' + err.message);
        res.status(500).json({ status: "Error with fetching supplier transaction details", error: err.message });
    }
});

// UPDATE - Update the quantity of a specific item by ID
router.put("/updateQuantitysupplierTransaction/:id", async (req, res) => {
    const supplierTransactionId = req.params.id;
    const Quantity = Number(req.body.Quantity);

    try {
        const updatedTransaction = await SupplierTransaction.findByIdAndUpdate(supplierTransactionId, { Quantity }, { new: true });
        logger.info(`Quantity updated for supplier transaction with ID ${supplierTransactionId}`);
        res.status(200).json({ status: "Quantity updated", supplierTransaction: updatedTransaction });
    } catch (err) {
        logger.error('Error updating quantity: ' + err.message);
        res.status(500).json({ status: "Error with updating quantity", error: err.message });
    }
});

// SEARCH - Search for supplier transactions by various fields
router.get("/search/:key", async (req, res) => {
    const key = req.params.key;

    try {
        const result = await SupplierTransaction.find({
            $or: [
                {   InvoiceNo: { $regex: req.params.key },
            },
            {
              ProductName: { $regex: req.params.key },
            },
            {
              Supplier: { $regex: req.params.key },
            },
            ]
        });
        logger.info(`Searched supplier transactions with key: ${key}`);
        res.status(200).json(result);
    } catch (err) {
        logger.error('Error searching supplier transactions: ' + err.message);
        res.status(500).json({ status: "Error with searching supplier transactions", error: err.message });
    }
});

// READ - Generate inventory report
router.get('/inventoryReport', async (req, res) => {
    try {
        const products = await SupplierTransaction.aggregate([
            { $group: { _id: '$ProductName', Quantity: { $sum: '$Quantity' } } },
            { $sort: { _id: 1 } },
        ]);
        logger.info('Inventory report generated');
        res.status(200).json(products);
    } catch (err) {
        logger.error('Error generating inventory report: ' + err.message);
        res.status(500).json({ message: err.message });
    }
});

module.exports = router;
