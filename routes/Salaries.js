const router = require("express").Router();
const nodemailer = require("nodemailer");
const Salary = require("../models/salary");
const SE = require("../models/salesexecutive");
const DD = require("../models/deliverydriver");
const C = require("../models/c");
const logger = require('../utils/logger.js');

// CREATE - Create salary
router.post("/addsal", async (req, res) => {
  const { type, eid, basicsalary, othrs, otrate, paydate, netsalary, email } = req.body;
  const msg = `Your salary Rs.${netsalary} has been credited`;

  try {
    let employeeExists = false;
    if (type === "Sales Executive") {
      employeeExists = await SE.findOne({ sid: `${eid}` });
    } else if (type === "Delivery Driver") {
      employeeExists = await DD.findOne({ did: `${eid}` });
    }

    if (!employeeExists) {
      logger.warn(`Employee ID ${eid} does not exist`);
      return res.status(404).json({ message: "Employee ID not found" });
    }

    const cd = await C.findOneAndUpdate(
      { id: "autoval" },
      { $inc: { seq: 1 } },
      { new: true }
    );

    let seqId;
    if (!cd) {
      const newval = new C({ id: "autoval", seq: 1 });
      await newval.save();
      seqId = 1;
    } else {
      seqId = cd.seq;
    }

    const newSalary = new Salary({
      Id: seqId,
      type,
      eid,
      basicsalary,
      othrs,
      otrate,
      paydate,
      netsalary,
    });

    await newSalary.save();
    logger.info(`Salary created for employee ID ${eid}`);
    
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL,
        pass: process.env.APP_PASSWORD,
      },
    });

    const mailOptions = {
      from: process.env.EMAIL,
      to: email,
      subject: "Salary Transaction",
      html: msg,
    };

    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        logger.error('Error sending email: ' + error.message);
        return res.status(500).json({ status: 500, error: error.message });
      }
      logger.info('Email sent: ' + info.response);
      res.status(201).json({ status: 201, info });
    });

  } catch (error) {
    logger.error('Error adding salary: ' + error.message);
    res.status(500).json({ status: 500, error: error.message });
  }
});

// READ function - fetch data of all salary transactions
router.get("/getsalary", async (req, res) => {
  try {
    const salaries = await Salary.find();
    logger.info('Fetched all salaries');
    res.status(200).json(salaries);
  } catch (err) {
    logger.error('Error fetching salaries: ' + err.message);
    res.status(500).json({ message: "Error fetching salaries", error: err.message });
  }
});

// DELETE function
router.delete("/deletet/:id", async (req, res) => {
  const Id = req.params.id;
  try {
    await Salary.findByIdAndDelete(Id);
    logger.info(`Salary with ID ${Id} deleted`);
    res.status(200).json("Success");
  } catch (err) {
    logger.error('Error deleting salary: ' + err.message);
    res.status(500).json({ message: "Error deleting salary", error: err.message });
  }
});

// UPDATE function
router.put("/update/:id", async (req, res) => {
  const Id = req.params.id;
  const { othrs, otrate, paydate, netsalary, email, difference } = req.body;

  let msg = difference < 0
    ? `Your salary has decreased by Rs.${Math.abs(difference)}`
    : `Your salary has increased by Rs.${difference}`;

  try {
    const updateTransaction = { othrs, otrate, paydate, netsalary };
    await Salary.findByIdAndUpdate(Id, updateTransaction);
    logger.info(`Salary with ID ${Id} updated`);

    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL,
        pass: process.env.APP_PASSWORD,
      },
    });

    const mailOptions = {
      from: process.env.EMAIL,
      to: email,
      subject: "Change in salary",
      html: msg,
    };

    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        logger.error('Error sending email: ' + error.message);
        return res.status(500).json({ status: 500, error: error.message });
      }
      logger.info('Email sent: ' + info.response);
      res.status(200).json({ status: 200, info });
    });
  } catch (error) {
    logger.error('Error updating salary: ' + error.message);
    res.status(500).json({ status: 500, error: error.message });
  }
});

// GET salary details by ID
router.get("/getId/:id", async (req, res) => {
  const id = req.params.id;
  try {
    const salary = await Salary.findOne({ Id: `${id}` });
    if (salary) {
      logger.info(`Fetched salary details for ID ${id}`);
      res.status(200).json({ status: "Details fetched", salary });
    } else {
      logger.warn(`No salary details found for ID ${id}`);
      res.status(404).json({ status: "Salary details not found" });
    }
  } catch (err) {
    logger.error('Error fetching salary details by ID: ' + err.message);
    res.status(500).json({ status: "Error fetching details", error: err.message });
  }
});

// GET salary details by employee ID
router.get("/getEid/:id", async (req, res) => {
  const id = req.params.id;
  try {
    const salaries = await Salary.find({ eid: `${id}` });
    logger.info(`Fetched salaries for employee ID ${id}`);
    res.status(200).json(salaries);
  } catch (err) {
    logger.error('Error fetching salaries by employee ID: ' + err.message);
    res.status(500).json({ status: "Error fetching salaries", error: err.message });
  }
});

// GET salary details by transaction ID
router.get("/getTid/:id", async (req, res) => {
  const id = req.params.id;
  try {
    const salary = await Salary.findOne({ Id: `${id}` });
    if (salary) {
      logger.info(`Fetched salary details for transaction ID ${id}`);
      res.status(200).json({ status: "SE Details fetched", salary });
    } else {
      logger.warn(`No salary details found for transaction ID ${id}`);
      res.status(404).json({ status: "Details not found" });
    }
  } catch (err) {
    logger.error('Error fetching salary details by transaction ID: ' + err.message);
    res.status(500).json({ status: "Error fetching details", error: err.message });
  }
});

module.exports = router;
