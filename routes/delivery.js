const router = require("express").Router();
const logger = require('../utils/logger.js'); 
const Delivery = require("../models/delivery");

// Add Delivery
router.route("/add").post(async (req, res) => {
    try {
        const { deliveryid, orderid, trackingid, did, deliveryaddress, deliveryfee } = req.body;

        const newDelivery = new Delivery({
            deliveryid,
            orderid,
            trackingid,
            did,
            deliveryaddress,
            deliveryfee,
            status: "Order Being Received",
        });

        await newDelivery.save();
        logger.info("New Delivery Added");
        res.status(201).json("New Delivery Added");
    } catch (err) {
        logger.error(`Error adding delivery: ${err.message}`);
        res.status(500).send({ status: "Error adding delivery", error: err.message });
    }
});

// Get All Deliveries
router.route("/get").get(async (req, res) => {
    try {
        const deliveries = await Delivery.find();
        logger.info("Fetched all deliveries");
        res.status(200).json(deliveries);
    } catch (err) {
        logger.error(`Error fetching deliveries: ${err.message}`);
        res.status(500).send({ status: "Error fetching deliveries", error: err.message });
    }
});

// Update Delivery
router.route("/update/:id").put(async (req, res) => {
    const userId = req.params.id;
    const { deliveryid, orderid, trackingid, did, deliveryaddress, deliveryfee } = req.body;

    const updateDelivery = {
        deliveryid,
        orderid,
        trackingid,
        did,
        deliveryaddress,
        deliveryfee,
    };

    try {
        const update = await Delivery.findByIdAndUpdate(userId, updateDelivery, { new: true });
        if (!update) {
            logger.info("Delivery not found");
            return res.status(404).send({ status: "Delivery not found" });
        }
        logger.info("Delivery updated successfully");
        res.status(200).send({ status: "Delivery updated", delivery: update });
    } catch (err) {
        logger.error(`Error updating delivery: ${err.message}`);
        res.status(500).send({ status: "Error updating delivery", error: err.message });
    }
});

// Update Delivery Status
router.route("/updateDD/:id").put(async (req, res) => {
    const userId = req.params.id;
    const { status } = req.body;

    const updateDelivery = { status };

    try {
        const update = await Delivery.findByIdAndUpdate(userId, updateDelivery, { new: true });
        if (!update) {
            logger.info("Delivery not found");
            return res.status(404).send({ status: "Delivery not found" });
        }
        logger.info("Delivery driver updated successfully");
        res.status(200).send({ status: "Delivery driver updated", delivery: update });
    } catch (err) {
        logger.error(`Error updating delivery status: ${err.message}`);
        res.status(500).send({ status: "Error updating delivery status", error: err.message });
    }
});

// Delete Delivery
router.route('/delete/:id').delete(async (req, res) => {
    const userId = req.params.id;

    try {
        const delivery = await Delivery.findByIdAndDelete(userId);
        if (!delivery) {
            logger.info("Delivery not found");
            return res.status(404).send({ status: "Delivery not found" });
        }
        logger.info("Delivery deleted successfully");
        res.status(200).send({ status: "Delivery deleted successfully" });
    } catch (err) {
        logger.error(`Error deleting delivery: ${err.message}`);
        res.status(500).send({ status: "Error deleting delivery", error: err.message });
    }
});

// Get Delivery by ID
router.route("/get/:id").get(async (req, res) => {
    const objId = req.params.id;

    try {
        const delivery = await Delivery.findById(objId);
        if (!delivery) {
            logger.info("Delivery not found");
            return res.status(404).send({ status: "Delivery not found" });
        }
        logger.info("Delivery found");
        res.status(200).send({ status: "Delivery Found", delivery });
    } catch (err) {
        logger.error(`Error fetching delivery by ID: ${err.message}`);
        res.status(500).send({ status: "Error fetching delivery", error: err.message });
    }
});

// Get Deliveries by Delivery ID
router.route("/getDeliDid/:id").get(async (req, res) => {
    const id = req.params.id;

    try {
        const deliveries = await Delivery.find({ did: id });
        logger.info("Fetched deliveries by delivery ID");
        res.status(200).json(deliveries);
    } catch (err) {
        logger.error(`Error fetching deliveries by delivery ID: ${err.message}`);
        res.status(500).send({ status: "Error fetching deliveries by delivery ID", error: err.message });
    }
});

module.exports = router;
