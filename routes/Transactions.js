const router = require("express").Router();
const Transaction = require("../models/transaction");
const { body, param } = require("express-validator");
const rateLimit = require('express-rate-limit');
const helmet = require('helmet');

router.use(helmet());

const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: 'Too many requests from this IP, please try again later.',
});

router.use(apiLimiter);


router.post("/det",[
    body('eid').trim().escape(),
    body('email').trim().escape(),
    body('basicsalary').trim().escape()
], async(req,res)=>{

    const eid = req.body.eid;
    const email = req.body.email;
    const basicsalary = Number(req.body.basicsalary);

    if (!eid || typeof eid !== 'string') {
        return res.status(400).json({ message: 'EID is required and must be a string' });
    }
    if (!email || !/^\S+@\S+\.\S+$/.test(email)) {
        return res.status(400).json({ message: 'Valid email is required' });
    }
    if (!basicsalary || isNaN(basicsalary)) {
        return res.status(400).json({ message: 'Basicsalary is required and must be a number' });
    }

    const newTransaction  =new Transaction({
        eid,email,basicsalary

    });

    await newTransaction.save();
    res.status(201);
    console.log("Added");
            
})

router.route("/get/:id").get([
    param('id').trim().escape(),
  ], async(req,res) => {
    let id = req.params.id;

    await Transaction.findOne({"eid" : `${id}`}).then((t) => {
        res.status(200).send({status : "Details fetched", t})
    }).catch((err) => {
        console.log(err.message);

        res.status(500).send({status : "Error with fetching details",error : err.message});
    })
})

router.route("/delete/:id").delete(async(req,res) => {
    let Id = req.params.id;
    await Transaction.findOneAndDelete(Id).then(()=>{
        res.status(200).json("success");
    }).catch((err) => {
        res.status(500).json("error");

    })
})

module.exports = router;