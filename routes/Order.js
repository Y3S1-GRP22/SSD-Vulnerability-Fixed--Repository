const router = require("express").Router();
const logger = require('../utils/logger.js');
let Order = require("../models/Order");

// Create new order
router.route("/addorder").post(async (req, res) => {
    const { OrderNo, ProductName, Address, Email, Price, Status } = req.body;

    const newOrder = new Order({
        OrderNo,
        ProductName,
        Address,
        Email,
        Price,
        Status
    });

    try {
        await newOrder.save();
        logger.info('Order added successfully');
        res.status(201).json({ message: "Order Added" });
    } catch (err) {
        logger.error('Error adding order: ' + err.message);
        res.status(500).json({ message: "Error adding order", error: err.message });
    }
});

// Display all orders
router.route("/order").get(async (req, res) => {
    try {
        const orders = await Order.find();
        logger.info('Fetched all orders');
        res.status(200).json(orders);
    } catch (err) {
        logger.error('Error fetching orders: ' + err.message);
        res.status(500).json({ message: "Error fetching orders", error: err.message });
    }
});

// Update order details
router.route("/updateorder/:id").put(async (req, res) => {
    const orderId = req.params.id;
    const { OrderNo, ProductName, Address, Email, Price, Status } = req.body;

    const updateOrder = {
        OrderNo,
        ProductName,
        Address,
        Email,
        Price,
        Status
    };

    try {
        const updatedOrder = await Order.findByIdAndUpdate(orderId, updateOrder, { new: true });
        if (updatedOrder) {
            logger.info('Order updated successfully');
            res.status(200).json({ message: "Order updated", order: updatedOrder });
        } else {
            logger.warn('Order not found');
            res.status(404).json({ message: "Order not found" });
        }
    } catch (err) {
        logger.error('Error updating order: ' + err.message);
        res.status(500).json({ message: "Error updating order", error: err.message });
    }
});

// Delete order
router.route("/deleteorder/:id").delete(async (req, res) => {
    const orderId = req.params.id;

    try {
        const deletedOrder = await Order.findByIdAndDelete(orderId);
        if (deletedOrder) {
            logger.info('Order deleted successfully');
            res.status(200).json({ message: "Order deleted" });
        } else {
            logger.warn('Order not found');
            res.status(404).json({ message: "Order not found" });
        }
    } catch (err) {
        logger.error('Error deleting order: ' + err.message);
        res.status(500).json({ message: "Error deleting order", error: err.message });
    }
});

// Update the status of a specific order
router.route("/updateOrder/:id").put(async (req, res) => {
    const orderId = req.params.id;
    const { Status } = req.body;

    try {
        const updatedStatus = await Order.findByIdAndUpdate(orderId, { Status }, { new: true });
        if (updatedStatus) {
            logger.info('Order status updated successfully');
            res.status(200).json({ message: "Status updated" });
        } else {
            logger.warn('Order not found');
            res.status(404).json({ message: "Order not found" });
        }
    } catch (err) {
        logger.error('Error updating order status: ' + err.message);
        res.status(500).json({ message: "Error updating order status", error: err.message });
    }
});

// Get order by ID
router.route("/getorder/:id").get(async (req, res) => {
    const orderId = req.params.id;

    try {
        const order = await Order.findById(orderId);
        if (order) {
            logger.info('Order fetched successfully');
            res.status(200).json({ message: "Order fetched", order });
        } else {
            logger.warn('Order not found');
            res.status(404).json({ message: "Order not found" });
        }
    } catch (err) {
        logger.error('Error fetching order: ' + err.message);
        res.status(500).json({ message: "Error fetching order", error: err.message });
    }
});

// Search orders
router.get("/search/:key", async (req, res) => {
    const { key } = req.params;

    try {
        const result = await Order.find({
            $or: [
                {
                    OrderNo: { $regex: req.params.key },
                  },
                  {
                    ProductName: { $regex: req.params.key },
                  },
            ]
        });
        logger.info('Search completed');
        res.status(200).json(result);
    } catch (err) {
        logger.error('Error searching orders: ' + err.message);
        res.status(500).json({ message: "Error searching orders", error: err.message });
    }
});

module.exports = router;
