const router = require("express").Router();
const billsSchema = require("../models/bills");
const logger = require('../utils/logger.js'); // Assuming you have a logger configuration file

// Read Bills------------------------------------------------------------------
router.get("/readB", async (req, res) => {
  try {
    const data = await billsSchema.find({});
    res.send(data);
    logger.info("Bills fetched successfully");
  } catch (error) {
    logger.error("Error fetching bills: ", error);
    res.status(500).send("Error fetching bills");
  }
});

// Delete Bills----------------------------------------------------------------
router.delete("/deleteBills/:id", async (req, res) => {
  const id = req.params.id;
  try {
    await billsSchema.findByIdAndRemove(id).exec();
    res.send("Bill deleted successfully");
    logger.info(`Bill with ID: ${id} deleted`);
  } catch (error) {
    logger.error("Error deleting bill: ", error);
    res.status(500).send("Error deleting bill");
  }
});

// Update Bills----------------------------------------------------------------
router.put("/updateBills/:id", async (req, res) => {
  const id = req.params.id;
  const { newName, newAmount, newStatus, newDate } = req.body;

  const updateTransaction = {
    name: newName,
    amount: newAmount,
    status: newStatus,
    date: newDate,
  };

  try {
    const update = await billsSchema.findByIdAndUpdate(id, updateTransaction, { new: true }).exec();
    if (!update) {
      res.status(404).send("Bill not found");
      logger.error(`Bill with ID: ${id} not found`);
      return;
    }
    res.send("Bill updated successfully");
    logger.info(`Bill with ID: ${id} updated successfully`);
  } catch (error) {
    logger.error("Error updating bill: ", error);
    res.status(500).send("Error updating bill");
  }
});

// Find Bills By ID-------------------------------------------------------------
router.get("/readBillsByID/:id", async (req, res) => {
  const fetchid = req.params.id;

  try {
    const data = await billsSchema.findById(fetchid);
    if (!data) {
      res.status(404).send("Bill not found");
      logger.error(`Bill with ID: ${fetchid} not found`);
      return;
    }
    res.send(data);
    logger.info(`Bill with ID: ${fetchid} fetched successfully`);
  } catch (error) {
    logger.error("Error fetching bill by ID: ", error);
    res.status(500).send("Error fetching bill by ID");
  }
});

// Add Bills--------------------------------------------------------------------
router.post("/insertBills", async (req, res) => {
  const { name, amount, status, date } = req.body;

  if (!name || !amount || !status || !date) {
    return res.status(400).send("All fields are required");
  }

  const newBill = new billsSchema({
    name,
    amount,
    status,
    date,
  });

  try {
    await newBill.save();
    res.json("Bill added successfully");
    logger.info("New bill added");
  } catch (error) {
    logger.error("Error adding bill: ", error);
    res.status(500).send("Error adding bill");
  }
});

// Find Duplicate Bills---------------------------------------------------------
router.get("/readDuplicate/:did", async (req, res) => {
  const fetchid = req.params.did;

  try {
    const data = await billsSchema.find({ did: fetchid });
    res.send(data);
    logger.info(`Duplicate bills fetched for ID: ${fetchid}`);
  } catch (error) {
    logger.error("Error fetching duplicate bills: ", error);
    res.status(500).send("Error fetching duplicate bills");
  }
});

// Search Bills-----------------------------------------------------------------
router.get("/search/:key", async (req, res) => {
  const searchKey = req.params.key;

  try {
    const result = await billsSchema.find({
      $or: [
        { name: { $regex: searchKey, $options: "i" } },
        { status: { $regex: searchKey, $options: "i" } },
      ],
    });
    res.send(result);
    logger.info(`Bills search result for key: ${searchKey}`);
  } catch (error) {
    logger.error("Error searching bills: ", error);
    res.status(500).send("Error searching bills");
  }
});

module.exports = router;
