const router = require("express").Router();
const Admin = require("../models/admin");
const { body } = require("express-validator");
const bcrypt = require("bcrypt");
const rateLimit = require('express-rate-limit');
const helmet = require('helmet');


router.use(helmet());

const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: 'Too many requests from this IP, please try again later.',
});

router.use(apiLimiter);

router.post("/addad", [
  body("fullname").trim().escape(),
  body("email").normalizeEmail().trim(),
  body("password").trim().escape(),
], async (req, res) => {
  // console.log(req.body);;
  const fullname = req.body.fullname;
  const email = req.body.email;
  const password = req.body.password;

  if (!fullname) {
    return res.status(400).json({ error: "Full name is required" });
  } else if (!email) {
    return res.status(400).json({ error: "Email is required" });
  } else if (!password) {
    return res.status(400).json({ error: "Password is required" });
  }

  if (fullname.length < 3) {
    return res.status(400).json({ error: "Full name should be at least 3 characters long" });
  }

  const emailRegex = /^\S+@\S+\.\S+$/;
  if (!emailRegex.test(email)) {
    return res.status(400).json({ error: "Please provide a valid email address" });
  }

  if (password.length < 6) {
    return res.status(400).json({ error: "Password should be at least 6 characters long" });
  }

  try {
    const preuser = await Admin.findOne({ email: email });
    console.log(preuser);

    if (preuser) {
      res.status(200).json("Taken");
    } else {

      const hashedPassword = await bcrypt.hash(password, 10);

      const newAdmin = new Admin({
        fullname,
        email,
        password: hashedPassword,
      });

      await newAdmin.save();
      res.status(201).json(newAdmin);
      console.log("Added");
      console.log(newAdmin);
    }
  } catch (error) {
    res.status(422).json(error);
  }
});

module.exports = router;
