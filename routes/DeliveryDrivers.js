const router = require("express").Router();
const DeliveryDriver = require("../models/deliverydriver"); //import delivery driver model
const bcrypt = require("bcrypt")
const { isISO8601 } = require('validator')
const nodemailer = require("nodemailer");
const sanitizeHtml = require('sanitize-html');
const { body, param } = require("express-validator");
const rateLimit = require('express-rate-limit');
const helmet = require('helmet');

router.use(helmet());

const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, 
  max: 100,
  message: 'Too many requests from this IP, please try again later.',
});

router.use(apiLimiter);


//CREATE function - create/adding a deliverydriver
const isValidNIC = (nic) => /^\d{12}$/.test(nic);
const isValidLicenseNo = (licenseno) => /^\d{10}$/.test(licenseno);
const isPositiveNumber = (value) => !isNaN(value) && value > 0;

router.post("/adddd", [
  body('did').trim().escape(),
  body('fullname').trim().escape(),
  body('email').trim().escape(),
  body('password').trim().escape(),
  body('address').trim().escape(),
  body('phone').trim().escape(),
  body('dob').trim().escape(),
  body('licenseno').trim().escape(),
  body('vehicleno').trim().escape(),
  body('nic').trim().escape(),
  body('basicsalary').trim().escape(),
], async (req, res) => {
  // get the body of the request and store the values in variables
  const { did, fullname, email, password, address, phone, dob, licenseno, vehicleno, nic, basicsalary, image } = req.body;
  const msg = `You are now an employee of LuxuryX. Your username is ${sanitizeHtml(email)} and password is ${password}`;

  if (!did || did.trim().length === 0) {
    return res.status(400).json({ error: 'Driver ID is required' });
  }
  if (!fullname || fullname.trim().length === 0) {
    return res.status(400).json({ error: 'Full name is required' });
  }
  if (!email || !/\S+@\S+\.\S+/.test(email)) {
    return res.status(400).json({ error: 'Valid email is required' });
  }
  if (!password || password.length < 6) {
    return res.status(400).json({ error: 'Password must be at least 6 characters long' });
  }
  if (!address || address.trim().length === 0) {
    return res.status(400).json({ error: 'Address is required' });
  }
  if (!phone || isNaN(Number(phone))) {
    return res.status(400).json({ error: 'Phone number must be numeric' });
  }
  if (!dob || !Date.parse(dob)) {
    return res.status(400).json({ error: 'Valid date of birth is required' });
  }
  if (!licenseno || licenseno.trim().length === 0) {
    return res.status(400).json({ error: 'License number is required' });
  }
  if (!isValidLicenseNo(licenseno)) {
    return res.status(400).json({ error: 'License Number must be exactly 10 digits and numeric' });
  }
  if (!vehicleno || vehicleno.trim().length === 0) {
    return res.status(400).json({ error: 'Vehicle number is required' });
  }
  if (!nic || nic.trim().length === 0) {
    return res.status(400).json({ error: 'NIC is required' });
  }
  if (!isValidNIC(nic)) {
    return res.status(400).json({ error: 'NIC must be exactly 12 digits and numeric' });
  }
  if (!basicsalary || !isPositiveNumber(Number(basicsalary))) {
    return res.status(400).json({ error: 'Valid basic salary is required' });
  }

  try {
    const preuser = await DeliveryDriver.findOne({ email: email }); // check whether the email address already exists
    const useId = await DeliveryDriver.findOne({ did: did }); // check whether the did already exists

    if (preuser) {
      return res.status(200).json("Taken"); // response in json format if email is already taken
    }
    if (useId) {
      return res.status(200).json("Id"); // response in json format if did is already taken
    }

    // send email
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: "itpmetrogroup2@gmail.com",
        pass: "hfyfimbbvdzdypfh",
      },
    });

    const mailOptions = {
      from: "itpmetrogroup2@gmail.com",
      to: email,
      subject: "Congratulations!",
      html: msg,
    };

    try {
      const info = await transporter.sendMail(mailOptions);
      console.log("Email sent:" + info.response);

      // Hash the password and save the new driver
      const hashedpassword = await bcrypt.hash(password, 12);
      const newDeliveryDriver = new DeliveryDriver({
        did,
        fullname,
        email,
        password: hashedpassword,
        address,
        phone,
        dob,
        licenseno,
        vehicleno,
        nic,
        basicsalary,
        image,
      });

      await newDeliveryDriver.save(); // save the newly created object in the database
      return res.status(201).json(newDeliveryDriver); // response in json format
    } catch (error) {
      console.log("Error sending email" + error);
      return res.status(401).json({ status: 401, error });
    }
  } catch (error) {
    console.log("Error finding existing user" + error);
    return res.status(422).send({ status: "Email already taken" }); // catch error and send error as a json object
  }
});

//READ function - fetch data of all deliverydrivers

router.route("/getdd").get((req, res) => {
  //get is used to retrieve data from database
  DeliveryDriver.find() //find() method is used to fetch details of all deliverydrivers from the db
    .then((deliverydrivers) => {
      res.json(deliverydrivers); //if success, then a response is sent to front end(response is all delivery drivers)
    })
    .catch((err) => {
      console.log(err);
    });
});

//DELETE function

router.route("/deletedd/:id").delete([
  param('id').trim().escape(),
], async (req, res) => {
  let Id = req.params.id; //get the id from the request(parameter)
  await DeliveryDriver.findByIdAndDelete(Id) //delete the deliverydriver with whose id = Id
    .then(() => {
      res.status(200).json("success"); //send success message to the frontend
    })
    .catch((err) => {
      res.status(500).json("error"); //send error message to the frontend
    });
});

//Function to get the the deliverydriver details by their did

router.route("/getDid/:id").get([
  param('id').trim().escape(),
], async (req, res) => {
  let id = req.params.id; //get the id from the request(parameter)

  await DeliveryDriver.findOne({ did: `${id}` }) //compare the did with the got id and return the details
    .then((dd) => {
      res.status(200).send({ status: "DD Details fetched", dd }); //send response as a json object and a status
    })
    .catch((err) => {
      console.log(err.message);

      res.status(500).send({ status: "Error with fetching DD details", error: err.message }); //send error message
    });
});

// UPDATE function
router.route("/update/:id").put([
  param('id').trim().escape(),
], async (req, res) => {
  const Id = req.params.id; // get the id from the request (parameter)

  // get the body of the request and store the values in variables
  const { fullname, email, address, phone, dob, licenseno, vehicleno, nic, basicsalary } = req.body;

  if (!fullname || fullname.trim().length === 0) {
    return res.status(400).json({ error: 'Full name is required' });
  }
  if (!email || !/\S+@\S+\.\S+/.test(email)) {
    return res.status(400).json({ error: 'Valid email is required' });
  }
  if (!address || address.trim().length === 0) {
    return res.status(400).json({ error: 'Address is required' });
  }
  if (!phone || isNaN(Number(phone))) {
    return res.status(400).json({ error: 'Phone number must be numeric' });
  }
  if (!dob || !Date.parse(dob)) {
    return res.status(400).json({ error: 'Valid date of birth is required' });
  }
  if (!licenseno || licenseno.trim().length === 0) {
    return res.status(400).json({ error: 'License number is required' });
  }
  if (!isValidLicenseNo(licenseno)) {
    return res.status(400).json({ error: 'License Number must be exactly 10 digits and numeric' });
  }
  if (!vehicleno || vehicleno.trim().length === 0) {
    return res.status(400).json({ error: 'Vehicle number is required' });
  }
  if (!nic || nic.trim().length === 0) {
    return res.status(400).json({ error: 'NIC is required' });
  }
  if (!isValidNIC(nic)) {
    return res.status(400).json({ error: 'NIC must be exactly 12 digits and numeric' });
  }
  if (!basicsalary || !isPositiveNumber(Number(basicsalary))) {
    return res.status(400).json({ error: 'Valid basic salary is required' });
  }

  const updateDeliveryDriver = { // fetch the retrieved info to a variable
    fullname,
    email,
    address,
    phone,
    dob,
    licenseno,
    vehicleno,
    nic,
    basicsalary,
  };

  try {
    await DeliveryDriver.findByIdAndUpdate(Id, updateDeliveryDriver); // update the details with the update variable where id = "Id"
    return res.status(200).send("Done"); // send status
  } catch (err) {
    console.log(err);
    return res.status(500).json("Failed"); // send status
  }
});

module.exports = router;
