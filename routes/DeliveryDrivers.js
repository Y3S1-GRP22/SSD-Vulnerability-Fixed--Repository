const router = require("express").Router();
const DeliveryDriver = require("../models/deliverydriver"); // Import delivery driver model
const bcrypt = require("bcrypt");
const nodemailer = require("nodemailer");
const logger = require('../utils/logger.js'); 

// CREATE function - create/adding a delivery driver
router.post("/adddd", async (req, res) => {
    const { did, fullname, email, password, address, phone, dob, licenseno, vehicleno, nic, basicsalary, image } = req.body;
    const msg = `You are now an employee of LuxuryX. Your username is ${email} and password is ${password}`;

    try {
        const preuser = await DeliveryDriver.findOne({ email: email }); // Check if email already exists
        const useId = await DeliveryDriver.findOne({ did: did }); // Check if did already exists

        if (preuser) {
            logger.info("Email already taken");
            return res.status(400).json("Email already taken");
        } else if (useId) {
            logger.info("ID already taken");
            return res.status(400).json("ID already taken");
        }

        // Send email
        try {
            const transporter = nodemailer.createTransport({
                service: "gmail",
                auth: {
                    user: process.env.EMAIL,
                    pass: process.env.APP_PASSWORD,
                },
            });

            const mailOptions = {
                from: process.env.EMAIL,
                to: email,
                subject: "Congratulations!",
                html: msg,
            };

            await transporter.sendMail(mailOptions);
            logger.info("Email sent successfully");
        } catch (error) {
            logger.error(`Error sending email: ${error.message}`);
            return res.status(500).json({ status: 500, error: error.message });
        }

        // Hash password and save new delivery driver
        const hashedPassword = await bcrypt.hash(password, 12);
        const newDeliveryDriver = new DeliveryDriver({
            did,
            fullname,
            email,
            password: hashedPassword,
            address,
            phone,
            dob,
            licenseno,
            vehicleno,
            nic,
            basicsalary,
            image,
        });

        await newDeliveryDriver.save();
        logger.info("New delivery driver added successfully");
        res.status(201).json(newDeliveryDriver);

    } catch (error) {
        logger.error(`Error adding delivery driver: ${error.message}`);
        res.status(422).json({ status: 422, error: error.message });
    }
});

// READ function - fetch data of all delivery drivers
router.route("/getdd").get(async (req, res) => {
    try {
        const deliveryDrivers = await DeliveryDriver.find();
        logger.info("Fetched all delivery drivers");
        res.status(200).json(deliveryDrivers);
    } catch (err) {
        logger.error(`Error fetching delivery drivers: ${err.message}`);
        res.status(500).json({ status: 500, error: err.message });
    }
});

// DELETE function
router.route("/deletedd/:id").delete(async (req, res) => {
    const id = req.params.id;

    try {
        const result = await DeliveryDriver.findByIdAndDelete(id);
        if (!result) {
            logger.info("Delivery driver not found");
            return res.status(404).json("Delivery driver not found");
        }
        logger.info("Delivery driver deleted successfully");
        res.status(200).json("Delivery driver deleted successfully");
    } catch (err) {
        logger.error(`Error deleting delivery driver: ${err.message}`);
        res.status(500).json({ status: 500, error: err.message });
    }
});

// Function to get delivery driver details by their DID
router.route("/getDid/:id").get(async (req, res) => {
    const id = req.params.id;

    try {
        const deliveryDriver = await DeliveryDriver.findOne({ did: id });
        if (!deliveryDriver) {
            logger.info("Delivery driver not found");
            return res.status(404).json({ status: "Delivery driver not found" });
        }
        logger.info("Delivery driver details fetched successfully");
        res.status(200).json({ status: "Delivery driver details fetched", deliveryDriver });
    } catch (err) {
        logger.error(`Error fetching delivery driver details: ${err.message}`);
        res.status(500).json({ status: "Error fetching delivery driver details", error: err.message });
    }
});

// UPDATE function
router.route("/update/:id").put(async (req, res) => {
    const id = req.params.id;
    const { fullname, email, address, phone, dob, licenseno, vehicleno, nic, basicsalary } = req.body;

    const updateDeliveryDriver = {
        fullname,
        email,
        address,
        phone,
        dob,
        licenseno,
        vehicleno,
        nic,
        basicsalary,
    };

    try {
        const updatedDriver = await DeliveryDriver.findByIdAndUpdate(id, updateDeliveryDriver, { new: true });
        if (!updatedDriver) {
            logger.info("Delivery driver not found");
            return res.status(404).json("Delivery driver not found");
        }
        logger.info("Delivery driver updated successfully");
        res.status(200).json({ status: "Delivery driver updated successfully", updatedDriver });
    } catch (err) {
        logger.error(`Error updating delivery driver: ${err.message}`);
        res.status(500).json({ status: "Error updating delivery driver", error: err.message });
    }
});

module.exports = router;
