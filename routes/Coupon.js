const router = require("express").Router();
let coupon = require("../models/Coupon");
const logger = require('../utils/logger.js'); // Assuming you have a logger configuration file


// Add Coupon
router.post("/addcoupon", async (req, res) => {
  const { code, expiryDate, usageLimit, usedCount, discountPercentage, product } = req.body;

  const newCoupon = new coupon({
    code,
    expiryDate,
    usageLimit,
    usedCount,
    discountPercentage: Number(discountPercentage),
    product,
  });

  try {
    await newCoupon.save();
    res.json("Coupon details added!");
    logger.info("Coupon added successfully");
  } catch (err) {
    logger.error("Error adding coupon: ", err);
    res.status(500).send("Error adding coupon");
  }
});

// Display Coupon Details
router.get("/coupon", async (req, res) => {
  try {
    const coupons = await coupon.find();
    res.json(coupons);
    logger.info("Coupons fetched successfully");
  } catch (err) {
    logger.error("Error fetching coupons: ", err);
    res.status(500).send("Error fetching coupons");
  }
});

// Update Coupon Details
router.put("/updatecoupon/:id", async (req, res) => {
  const couponId = req.params.id;
  const { code, expiryDate, usageLimit, usedCount, discountPercentage, product } = req.body;

  const updateCoupon = {
    code,
    expiryDate,
    usageLimit,
    usedCount,
    discountPercentage,
    product,
  };

  try {
    const update = await coupon.findByIdAndUpdate(couponId, updateCoupon, { new: true });
    if (!update) {
      logger.error(`Coupon with ID: ${couponId} not found`);
      return res.status(404).send({ status: "Coupon not found" });
    }
    res.status(200).send({ status: "Data updated", coupon: update });
    logger.info(`Coupon with ID: ${couponId} updated successfully`);
  } catch (err) {
    logger.error("Error updating coupon: ", err);
    res.status(500).send("Error updating coupon");
  }
});

// Delete Coupon
router.delete("/deletecoupon/:id", async (req, res) => {
  const couponId = req.params.id;

  try {
    const deletedCoupon = await coupon.findByIdAndDelete(couponId);
    if (!deletedCoupon) {
      logger.error(`Coupon with ID: ${couponId} not found`);
      return res.status(404).send({ status: "Coupon not found" });
    }
    res.status(200).send({ status: "Coupon deleted" });
    logger.info(`Coupon with ID: ${couponId} deleted successfully`);
  } catch (err) {
    logger.error("Error deleting coupon: ", err);
    res.status(500).send({ status: "Error with deleting data", error: err.message });
  }
});

// Get Coupon by Code
router.get("/getcoupon/:code", async (req, res) => {
  const codeS = req.params.code;

  try {
    const couponData = await coupon.findOne({ code: codeS });
    if (!couponData) {
      logger.error(`Coupon with code: ${codeS} not found`);
      return res.status(404).send({ status: "Coupon not found" });
    }
    res.status(200).send({ status: "Coupon fetched", coupon: couponData });
    logger.info(`Coupon with code: ${codeS} fetched successfully`);
  } catch (err) {
    logger.error("Error fetching coupon by code: ", err);
    res.status(500).send({ status: "Error with Coupon", error: err.message });
  }
});

// Search Coupons
router.get("/search/:key", async (req, res) => {
  const searchKey = req.params.key;
  try {
    const result = await coupon.find({
      $or: [
        { code: { $regex: searchKey, $options: "i" } },
        { product: { $regex: searchKey, $options: "i" } },
        { usedCount: { $regex: searchKey, $options: "i" } },
      ],
    });
    res.send(result);
    logger.info(`Coupons search result for key: ${searchKey}`);
  } catch (err) {
    logger.error("Error searching coupons: ", err);
    res.status(500).send("Error searching coupons");
  }
});

module.exports = router;
