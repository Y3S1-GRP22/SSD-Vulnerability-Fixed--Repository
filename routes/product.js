const express = require("express");
const router = express.Router();
const Product = require("../models/Product");
const logger = require('../utils/logger.js');

// GET ALL THE PRODUCT DETAILS
router.get("/", async (req, res) => {
  try {
    const products = await Product.find();
    logger.info('Fetched all products');
    res.status(200).json(products);
  } catch (err) {
    logger.error('Error fetching products: ' + err.message);
    res.status(500).json({ message: "Error fetching products", error: err.message });
  }
});

// SUBMIT PRODUCT INFORMATION
router.post("/", async (req, res) => {
  const product = new Product({
    ProductName: req.body.ProductName,
    Price: req.body.Price,
    Description: req.body.Description,
    Qty: req.body.Qty,
    ImageBase64: req.body.ImageBase64,
    Category: req.body.Category,
  });

  try {
    const savedProduct = await product.save();
    logger.info('Product added successfully');
    res.status(201).json(savedProduct);
  } catch (err) {
    logger.error('Error adding product: ' + err.message);
    res.status(500).json({ message: "Error adding product", error: err.message });
  }
});

// GET SPECIFIC PRODUCT
router.get("/:productId", async (req, res) => {
  try {
    const product = await Product.findById(req.params.productId);
    if (product) {
      logger.info('Fetched product details');
      res.status(200).json(product);
    } else {
      logger.warn('Product not found');
      res.status(404).json({ message: "Product not found" });
    }
  } catch (err) {
    logger.error('Error fetching product: ' + err.message);
    res.status(500).json({ message: "Error fetching product", error: err.message });
  }
});

// DELETE SPECIFIC PRODUCT
router.delete("/:productId", async (req, res) => {
  try {
    const removeProduct = await Product.findByIdAndDelete(req.params.productId);
    if (removeProduct) {
      logger.info('Product deleted successfully');
      res.status(200).json({ message: "Product deleted" });
    } else {
      logger.warn('Product not found');
      res.status(404).json({ message: "Product not found" });
    }
  } catch (err) {
    logger.error('Error deleting product: ' + err.message);
    res.status(500).json({ message: "Error deleting product", error: err.message });
  }
});

// UPDATE A PRODUCT DETAILS
router.patch("/:productId", async (req, res) => {
  try {
    const updateProduct = await Product.updateOne(
      { _id: req.params.productId },
      {
        $set: {
          ProductName: req.body.ProductName,
          Price: req.body.Price,
          Description: req.body.Description,
          Qty: req.body.Qty,
          ImageBase64: req.body.ImageBase64,
          Category: req.body.Category,
        },
      }
    );
    if (updateProduct.nModified > 0) {
      logger.info('Product updated successfully');
      res.status(200).json({ message: "Product updated", updateProduct });
    } else {
      logger.warn('Product not found or no changes made');
      res.status(404).json({ message: "Product not found or no changes made" });
    }
  } catch (err) {
    logger.error('Error updating product: ' + err.message);
    res.status(500).json({ message: "Error updating product", error: err.message });
  }
});

// GET PRODUCT BY SLUG
router.get("/allProd", async (req, res) => {
  try {
    const product = await Product.findOne({ slug: req.query.slug }).select("-photo").populate("category");
    if (product) {
      logger.info('Fetched product by slug');
      res.status(200).send({
        success: true,
        message: "Single Product Fetched",
        product,
      });
    } else {
      logger.warn('Product not found');
      res.status(404).send({
        success: false,
        message: "Product not found",
      });
    }
  } catch (error) {
    logger.error('Error fetching product by slug: ' + error.message);
    res.status(500).send({
      success: false,
      message: "Error while getting single product",
      error: error.message,
    });
  }
});

module.exports = router;
