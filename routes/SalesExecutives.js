const router = require("express").Router();
const SalesExecutive = require("../models/salesexecutive");
const bcrypt = require("bcrypt");
const nodemailer = require("nodemailer");
const logger = require('../utils/logger.js'); // Ensure you have a logger utility

// CREATE function - create/adding a sales executive
router.post("/addse", async (req, res) => {
  const { sid, fullname, email, password, address, phone, dob, qualification, basicsalary, gender, image } = req.body;
  const msg = `You are now an employee of LuxuryX. Your username is ${email} and password is ${password}`;

  try {
    const preuser = await SalesExecutive.findOne({ email });
    const useId = await SalesExecutive.findOne({ sid });

    if (preuser) {
      logger.warn(`Email ${email} is already taken`);
      return res.status(400).json({ message: "Email is already taken" });
    }
    if (useId) {
      logger.warn(`SID ${sid} is already taken`);
      return res.status(400).json({ message: "SID is already taken" });
    }

    const hashedPassword = await bcrypt.hash(password, 12);

    const newSalesExecutive = new SalesExecutive({
      sid,
      fullname,
      email,
      password: hashedPassword,
      address,
      phone,
      dob,
      qualification,
      basicsalary,
      gender,
      image,
    });

    await newSalesExecutive.save();
    logger.info(`Sales Executive created with SID ${sid}`);

    try {
      const transporter = nodemailer.createTransport({
        service: "gmail",
        auth: {
          user: process.env.EMAIL,
          pass: process.env.APP_PASSWORD,
        },
      });

      const mailOptions = {
        from: process.env.EMAIL,
        to: email,
        subject: "Congratulations!",
        html: msg,
      };

      transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
          logger.error('Error sending email: ' + error.message);
          return res.status(500).json({ status: 500, error: error.message });
        }
        logger.info('Email sent: ' + info.response);
        res.status(201).json({ status: 201, newSalesExecutive, info });
      });
    } catch (emailError) {
      logger.error('Error sending email: ' + emailError.message);
      res.status(500).json({ status: 500, error: emailError.message });
    }
  } catch (error) {
    logger.error('Error creating Sales Executive: ' + error.message);
    res.status(422).json({ status: 422, error: error.message });
  }
});

// READ function - fetch data of all sales executives
router.get("/getse", async (req, res) => {
  try {
    const salesExecutives = await SalesExecutive.find();
    logger.info('Fetched all Sales Executives');
    res.status(200).json(salesExecutives);
  } catch (error) {
    logger.error('Error fetching Sales Executives: ' + error.message);
    res.status(500).json({ status: 500, error: error.message });
  }
});

// UPDATE function - update sales executive details
router.put("/update/:id", async (req, res) => {
  const id = req.params.id;
  const { sid, fullname, email, password, address, phone, dob, qualification, basicsalary, gender, image } = req.body;

  try {
    const hashedPassword = password ? await bcrypt.hash(password, 12) : undefined;

    const updateData = {
      sid,
      fullname,
      email,
      password: hashedPassword,
      address,
      phone,
      dob,
      qualification,
      basicsalary,
      gender,
      image,
    };

    const updatedSalesExecutive = await SalesExecutive.findByIdAndUpdate(id, updateData, { new: true });
    logger.info(`Sales Executive updated with ID ${id}`);
    res.status(200).json(updatedSalesExecutive);
  } catch (error) {
    logger.error('Error updating Sales Executive: ' + error.message);
    res.status(500).json({ status: 500, error: error.message });
  }
});

// DELETE function - delete sales executive
router.delete("/deletese/:id", async (req, res) => {
  const Id = req.params.id;

  try {
    await SalesExecutive.findByIdAndDelete(Id);
    logger.info(`Sales Executive with ID ${Id} deleted successfully`);
    res.status(200).json({ message: "Success" });
  } catch (err) {
    logger.error('Error deleting Sales Executive: ' + err.message);
    res.status(500).json({ message: "Error deleting Sales Executive", error: err.message });
  }
});

module.exports = router;
