const express = require("express");
const router = new express.Router();
let User = require("../models/User");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const requireSignIn = require("../middleware/authMiddleware");
const nodemailer = require("nodemailer");
const { body, param } = require("express-validator");
const rateLimit = require("express-rate-limit");
const helmet = require("helmet");
const logger = require("../utils/logger");

router.use(helmet());

const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: "Too many requests from this IP, please try again later.",
});

router.use(apiLimiter);

//user register
router.post(
  "/register",
  [
    body("fname").trim().escape(),
    body("email").trim().escape(),
    body("password").trim().escape(),
    body("address").trim().escape(),
    body("contact").trim().escape(),
  ],
  async (req, res) => {
    const { fname, email, password, address, contact } = req.body;

    if (!fname || !email || !password || !address || !contact) {
      return res.status(422).json({ error: "Fill in all required fields" });
    }

    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      return res.status(422).json({ error: "Invalid email format" });
    }

    if (password.length < 6) {
      return res
        .status(422)
        .json({ error: "Password must be at least 6 characters long" });
    }

    if (!/^\d{10}$/.test(contact)) {
      return res
        .status(422)
        .json({ error: "Contact number must be 10 digits" });
    }

    try {
      const preuser = await User.findOne({ email: email });

      if (preuser) {
        res.status(422).json({ error: "This user already exist" });
      } else {
        const finaluser = new User({
          fname,
          email,
          password,
          address,
          contact,
        });

        const storedata = await finaluser.save();
        logger.info(`User registered successfully: ${storedata}`);
        res.status(201).json(storedata);
      }
    } catch (error) {
      logger.error(`Error registering user: ${error.message}`);
      res.status(422).send({ error: error.message });
    }
  }
);
//login user
router.post(
  "/login",
  [body("email").trim().escape(), body("password").trim().escape()],
  async (req, res) => {
    try {
      const { email, password } = req.body;
      //validation
      if (!email || !password) {
        return res.status(404).send({
          success: false,
          message: "Email and password are required",
        });
      }

      if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
        return res.status(404).send({
          success: false,
          message: "Invalid email format",
        });
      }
      //check user
      const user = await User.findOne({ email });
      if (!user) {
        return res.status(404).send({
          success: false,
          message: "Email is not registerd",
        });
      }
      const match = await bcrypt.compare(password, user.password);
      if (!match) {
        return res.status(200).send({
          success: false,
          message: "Invalid Password",
        });
      }
      //token
      const token = jwt.sign({ _id: user._id }, process.env.JWT_SECRET, {
        expiresIn: "7d",
      });
      res.status(200).send({
        success: true,
        message: "login successfully",
        user: {
          _id: user._id,
          name: user.fname,
          email: user.email,
          address: user.address,
          contact: user.contact,
        },
        token,
      });
      logger.info(`User logged in successfully: ${user.email}`);
    } catch (error) {
      logger.error(`Error during login: ${error.message}`);

      res.status(500).send({
        success: false,
        message: "Error in login",
        error,
      });
    }
  }
);
//fetch all users
router.route("/").get((req, res) => {
  try {
    // Exclude password/hash fields from the response
    const users = User.find().select("-password -hash");

    if (!users || users.length === 0) {
      logger.warn("No users found");
      return res.status(404).json({ message: "No users found" });
    }

    logger.info("Fetched all users successfully");
    res.status(200).json(users);
  } catch (err) {
    logger.error(`Error fetching users: ${err.message || "Unknown error"}`);
    res.status(500).json({ message: "Server error while fetching users" });
  }
});
//test protected routes
router.get("/test", requireSignIn, async (req, res) => {
  try {
    res.send("Protected Routes");
  } catch (error) {
    logger.error(`Error in protected route: ${error.message}`);
    res.status(500).send({ error: error.message });
  }
});

router.get("/user-auth", requireSignIn, (req, res) => {
  res.status(200).send({ ok: true });
});

//user update
router.put(
  "/update-user",
  requireSignIn,
  [
    body("email").trim().escape(),
    body("password").trim().escape(),
    body("address").trim().escape(),
    body("contact").trim().escape(),
  ],
  async (req, res) => {
    const { email, password, name, address, contact } = req.body;

    if (!fname || !email || !password || !address || !contact) {
      return res.status(422).json({ error: "Fill in all required fields" });
    }

    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      return res.status(422).json({ error: "Invalid email format" });
    }

    if (password.length < 6) {
      return res
        .status(422)
        .json({ error: "Password must be at least 6 characters long" });
    }

    if (!/^\d{10}$/.test(contact)) {
      return res
        .status(422)
        .json({ error: "Contact number must be 10 digits" });
    }

    const user = await User.findOne({ email });

    if (user) {
      user.fname = req.body.name || user.fname;
      user.email = req.body.email || user.email;
      if (req.body.password) {
        user.password = req.body.password;
      }
      user.address = req.body.address || user.address;
      user.contact = req.body.contact || user.contact;
      const updatedUser = await user.save();
      res.status(200).send({
        success: true,
        message: "User Updated Successfully",
        updatedUser,
      });
      logger.info(`User updated successfully: ${updatedUser}`);
    } else {
      res.status(404);
      logger.warn(`User with email ${email} not found`);

      throw new Error("User Not Found");
    }
  }
);
//user delete by id
router
  .route("/delete/:id")
  .delete(requireSignIn, [param("id").trim().escape()], async (req, res) => {
    try {
      const userId = req.params.id;
      const removedUser = await User.findByIdAndDelete(userId);

      if (!removedUser) {
        logger.warn(`User with ID ${userId} not found`);
        return res.status(404).send({ status: "User not found" });
      }

      logger.info(`User deleted successfully: ${removedUser}`);
      res.status(200).send({ status: "User deleted" });
    } catch (error) {
      logger.error(`Error deleting user: ${error.message}`);
      res
        .status(500)
        .send({ status: "Error with delete user", error: error.message });
    }
  });
//search function
router.get("/search/:key", async (req, res) => {
  try {
    const result = await User.find({
      $or: [
        {
          email: { $regex: req.params.key },
        },
        {
          fname: { $regex: req.params.key },
        },
        {
          address: { $regex: req.params.key },
        },
      ],
    });
    logger.info(
      `Search results for key '${req.params.key}': ${result.length} items found`
    );
    res.send(result);
  } catch (err) {
    logger.error(`Error searching users: ${err.message}`);
    res.status(500).send({ message: err.message });
  }
});

router
  .route("/sendotp")
  .post([body("email").trim().escape()], async (req, res) => {
    console.log(req.body);
    const { email } = req.body;

    if (!email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      return res.status(422).json({ error: "Invalid email format" });
    }

    const _otp = Math.floor(100000 + Math.random() * 900000);
    let user = await User.findOne({ email: req.body.email });
    // send to user mail
    if (!user) {
      res.send({ code: 500, message: "user not found" });
    }
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL,
        pass: process.env.APP_PASSWORD,
      },
    });

    const mag = "This is your otp number " + _otp;

    let info = await transporter.sendMail({
      from: process.env.EMAIL,
      to: req.body.email, // list of receivers
      subject: "OTP", // Subject line
      html: mag,
    });
    if (info.messageId) {
      logger.info(info, 84);
      User.updateOne({ email: req.body.email }, { otp: _otp })
        .then((result) => {
          res.send({ code: 200, message: "otp send" });
        })
        .catch((err) => {
          res.send({ code: 500, message: "Server err" });
        });
    } else {
      res.send({ code: 500, message: "Server err" });
      logger.error(`Error sending OTP: ${err.message}`);
    }
  });

router.post(
  "/submitotp",
  [body("otp").trim().escape(), body("password").trim().escape()],
  async (req, res) => {
    try {
      const { otp, password } = req.body;
      if (!otp || !password) {
        return res.status(422).json({ error: "OTP and password are required" });
      }

      if (password.length < 6) {
        return res
          .status(422)
          .json({ error: "Password must be at least 6 characters long" });
      }

      //check
      const user = await User.findOne({ otp });
      //validation
      if (!user) {
        return res.status(404).send({
          success: false,
          message: "Wrong Email Or Answer",
        });
      }

      const hashPassword = async (password) => {
        try {
          const saltRounds = 10;
          const hashedPassword = await bcrypt.hash(password, saltRounds);
          return hashedPassword;
        } catch (error) {
          logger.error(error);
        }
      };
      const hashed = await hashPassword(password);
      await User.findByIdAndUpdate(user._id, { password: hashed });
      res.status(200).send({
        success: true,
        message: "Password Reset Successfully",
      });
      logger.info(`Password reset successfully for user: ${user.email}`);
    } catch (error) {
      logger.error(`Error resetting password: ${error.message}`);
      res.status(500).send({
        success: false,
        message: "Something went wrong",
        error,
      });
    }
  }
);

module.exports = router;
