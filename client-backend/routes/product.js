const express = require("express");
const dotenv = require("dotenv");
const router = express.Router();
const Product = require("../models/Product");
const CustomerOrder = require("../models/CustomerOrder");
const requireSignIn = require("../middleware/authMiddleware");
const braintree = require("braintree");
const { body } = require("express-validator");
const rateLimit = require('express-rate-limit');
const helmet = require('helmet');

router.use(helmet());

const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, 
  max: 100,
  message: 'Too many requests from this IP, please try again later.',
});

router.use(apiLimiter);


//payment gateway

//GET ALL THE PRODUCT DETAILS
router.get("/", async (req, res) => {
  try {
    const product = await Product.find();
    res.json(product);
  } catch (err) {
    res.json({ message: err });
  }
});

//SUBMIT PRODUCT INFORMATION
router.post("/",[
  body("ProductName").trim().escape(),
  body("Price").trim().escape(),
  body("Description").trim().escape(),
  body("Qty").trim().escape(),
  body("ImageBase64").trim().escape(),
  body("Category").trim().escape()
],  async (req, res) => {
  const { ProductName, Price, Description, Qty, ImageBase64, Category } = req.body;

  if (!ProductName) {
    return res.status(400).json({ message: "missing ProductName" });
  }
  if (isNaN(Price) || Price <= 0) {
    return res.status(400).json({ message: "missing Price" });
  }
  if (!Description) {
    return res.status(400).json({ message: "missing Description" });
  }
  if (isNaN(Qty) || Qty < 0) {
    return res.status(400).json({ message: "missing Qty" });
  }
  if (!ImageBase64) {
    return res.status(400).json({ message: "missing ImageBase64" });
  }
  if (!Category) {
    return res.status(400).json({ message: "missing Category" });
  }

  const product = new Product({
    ProductName: ProductName,
    Price: Price,
    Description: Description,
    Qty: Qty,
    ImageBase64: ImageBase64,
    Category: Category,
  });

  try {
    const saveProduct = await product.save();
    res.json(saveProduct);
  } catch (err) {
    res.json({ message: err });
  }
});

//SPECIFIC PRODUCT
router.get("/:productId", async (req, res) => {
  try {
    const product = await Product.findById(req.params.productId);
    res.json(product);
  } catch (err) {
    res.json({ message: err });
  }
});

//DELETE SPECIFIC PRODUCT
router.delete("/:productId", async (req, res) => {
  try {
    const removeProduct = await Product.remove({
      _id: req.params.productId,
    });
    res.json(removeProduct);
  } catch (err) {
    res.json({ message: err });
  }
});

//UPDATE A PRODUCT DETAILS
router.patch("/:productId",[
  body("ProductName").trim().escape(),
  body("Price").trim().escape(),
  body("Description").trim().escape(),
  body("Qty").trim().escape(),
  body("ImageBase64").trim().escape(),
  body("Category").trim().escape()
],  async (req, res) => {
  try {

    const { ProductName, Price, Description, Qty, ImageBase64, Category } = req.body;

    if (!ProductName) {
      return res.status(400).json({ message: "missing ProductName" });
    }
    if (isNaN(Price) || Price <= 0) {
      return res.status(400).json({ message: "missing Price" });
    }
    if (!Description) {
      return res.status(400).json({ message: "missing Description" });
    }
    if (isNaN(Qty) || Qty < 0) {
      return res.status(400).json({ message: "missing Qty" });
    }
    if (!ImageBase64) {
      return res.status(400).json({ message: "missing ImageBase64" });
    }
    if (!Category) {
      return res.status(400).json({ message: "missing Category" });
    }

    const updateProduct = await Product.updateOne(
      { _id: req.params.productId },
      {
        $set: {
          ProductName: ProductName,
          Price: Price,
          Description: Description,
          Qty: Qty,
          ImageBase64: ImageBase64,
          Category: Category,
        },
      }
    );
    res.json(updateProduct);
  } catch (err) {
    res.json({ message: err });
  }
});
router.get("/allProd", async (req, res) => {
  try {
    const product = await Product
      .findOne({ slug: req.params.slug })
      .select("-photo")
      .populate("category");
    res.status(200).send({
      success: true,
      message: "Single Product Fetched",
      product,
    });
  } catch (error) {
    console.log(error);
    res.status(500).send({
      success: false,
      message: "Eror while getitng single product",
      error,
    });
  }
});

router.get("/searchProduct/:key", async (req, res) => {
  let result = await Product.find({
    $or: [
      {
        ProductName: { $regex: req.params.key },
      },
    ],
  });
  res.send(result);
});

module.exports = router;
