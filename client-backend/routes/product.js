const express = require("express");
const dotenv = require("dotenv");
const router = express.Router();
const Product = require("../models/Product");
const CustomerOrder = require("../models/CustomerOrder");
const requireSignIn = require("../middleware/authMiddleware");
const braintree = require("braintree");
const { body } = require("express-validator");
const rateLimit = require("express-rate-limit");
const helmet = require("helmet");
const logger = require("../utils/logger");

router.use(helmet());

const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: "Too many requests from this IP, please try again later.",
});

router.use(apiLimiter);

//payment gateway

//GET ALL THE PRODUCT DETAILS
router.get("/", async (req, res) => {
  try {
    const products = await Product.find();
    logger.info("Fetched all products successfully");
    res.json(products);
  } catch (err) {
    logger.error(`Error fetching products: ${err.message}`);
    res.status(500).json({ message: err.message });
  }
});

//SUBMIT PRODUCT INFORMATION
router.post(
  "/",
  [
    body("ProductName").trim().escape(),
    body("Price").trim().escape(),
    body("Description").trim().escape(),
    body("Qty").trim().escape(),
    body("ImageBase64").trim().escape(),
    body("Category").trim().escape(),
  ],
  async (req, res) => {
    const { ProductName, Price, Description, Qty, ImageBase64, Category } =
      req.body;

    if (!ProductName) {
      return res.status(400).json({ message: "missing ProductName" });
    }
    if (isNaN(Price) || Price <= 0) {
      return res.status(400).json({ message: "missing Price" });
    }
    if (!Description) {
      return res.status(400).json({ message: "missing Description" });
    }
    if (isNaN(Qty) || Qty < 0) {
      return res.status(400).json({ message: "missing Qty" });
    }
    if (!ImageBase64) {
      return res.status(400).json({ message: "missing ImageBase64" });
    }
    if (!Category) {
      return res.status(400).json({ message: "missing Category" });
    }

    const product = new Product({
      ProductName: ProductName,
      Price: Price,
      Description: Description,
      Qty: Qty,
      ImageBase64: ImageBase64,
      Category: Category,
    });

    try {
      const savedProduct = await product.save();
      logger.info(`Product added successfully: ${savedProduct}`);
      res.status(201).json(savedProduct);
    } catch (err) {
      logger.error(`Error adding product: ${err.message}`);
      res.status(422).json({ message: err.message });
    }
  }
);

//SPECIFIC PRODUCT
router.get("/:productId", async (req, res) => {
  try {
    const product = await Product.findById(req.params.productId);
    if (!product) {
      logger.warn(`Product with ID ${req.params.productId} not found`);
      return res.status(404).json({ message: "Product not found" });
    }
    logger.info(`Fetched product: ${product}`);
    res.json(product);
  } catch (err) {
    logger.error(`Error fetching product: ${err.message}`);
    res.status(500).json({ message: err.message });
  }
});

//DELETE SPECIFIC PRODUCT
router.delete("/:productId", async (req, res) => {
  try {
    const removedProduct = await Product.findByIdAndDelete(
      req.params.productId
    );
    if (!removedProduct) {
      logger.warn(`Product with ID ${req.params.productId} not found`);
      return res.status(404).json({ message: "Product not found" });
    }
    logger.info(`Product deleted successfully: ${removedProduct}`);
    res.json({ message: "Product deleted successfully", removedProduct });
  } catch (err) {
    logger.error(`Error deleting product: ${err.message}`);
    res.status(500).json({ message: err.message });
  }
});

//UPDATE A PRODUCT DETAILS
router.patch(
  "/:productId",
  [
    body("ProductName").trim().escape(),
    body("Price").trim().escape(),
    body("Description").trim().escape(),
    body("Qty").trim().escape(),
    body("ImageBase64").trim().escape(),
    body("Category").trim().escape(),
  ],
  async (req, res) => {
    try {
      const { ProductName, Price, Description, Qty, ImageBase64, Category } =
        req.body;

      if (!ProductName) {
        return res.status(400).json({ message: "missing ProductName" });
      }
      if (isNaN(Price) || Price <= 0) {
        return res.status(400).json({ message: "missing Price" });
      }
      if (!Description) {
        return res.status(400).json({ message: "missing Description" });
      }
      if (isNaN(Qty) || Qty < 0) {
        return res.status(400).json({ message: "missing Qty" });
      }
      if (!ImageBase64) {
        return res.status(400).json({ message: "missing ImageBase64" });
      }
      if (!Category) {
        return res.status(400).json({ message: "missing Category" });
      }

      const updateProduct = await Product.updateOne(
        { _id: req.params.productId },
        {
          $set: {
            ProductName: ProductName,
            Price: Price,
            Description: Description,
            Qty: Qty,
            ImageBase64: ImageBase64,
            Category: Category,
          },
        }
      );
      logger.info(`Product updated successfully: ${updatedProduct}`);
      res.json(updatedProduct);
    } catch (err) {
      logger.error(`Error updating product: ${err.message}`);
      res.status(500).json({ message: err.message });
    }
  }
);
router.get("/allProd", async (req, res) => {
  try {
    const product = await Product.findOne({ slug: req.params.slug })
      .select("-photo")
      .populate("category");
    res.status(200).send({
      success: true,
      message: "Single Product Fetched",
      product,
    });
    logger.info("Fetched all products with category details successfully");
  } catch (error) {
    logger.error(`Error fetching all products: ${error.message}`);
    res.status(500).send({
      success: false,
      message: "Eror while getitng single product",
      error,
    });
  }
});

router.get("/searchProduct/:key", async (req, res) => {
  let result = await Product.find({
    $or: [
      {
        ProductName: { $regex: req.params.key },
      },
    ],
  });
  logger.info(
    `Product search results for key '${req.params.key}': ${result.length} items found`
  );

  res.send(result);
});

module.exports = router;
