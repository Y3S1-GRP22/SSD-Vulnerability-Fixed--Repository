const express = require("express");
const dotenv = require("dotenv");
const CustomerOrder = require("../models/CustomerOrder");
const router = new express.Router();
const mongoose = require("mongoose");
const { body, param } = require("express-validator");
const rateLimit = require("express-rate-limit");
const helmet = require("helmet");
const logger = require("../utils/logger");

router.use(helmet());

const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: "Too many requests from this IP, please try again later.",
});

router.use(apiLimiter);

//place order
router.post(
  "/submit",
  [
    body("email").trim().escape(),
    body("ProductName").trim().escape(),
    body("Price").trim().escape(),
    body("contact").trim().escape(),
    body("address").trim().escape(),
  ],
  async (req, res) => {
    const { email, ProductName, Price, contact, address } = req.body;
    if (!email || !ProductName || !Price || !contact || !address) {
      return res.status(400).json({ message: "All fields are required" });
    }

    if (!/^\S+@\S+\.\S+$/.test(email)) {
      return res.status(400).json({ message: "Invalid email format" });
    }

    if (isNaN(Price) || Price <= 0) {
      return res.status(400).json({ message: "Invalid price" });
    }

    if (isNaN(contact) || contact.toString().length !== 10) {
      return res.status(400).json({ message: "Invalid contact number" });
    }

    try {
      const newOrder = new CustomerOrder({
        email,
        ProductName,
        Price,
        contact,
        address,
      });

      const storedata = await newOrder.save();
      logger.info(`Order placed successfully: ${storedata}`);
      res.status(201).json(storedata);
    } catch (error) {
      logger.error(`Cannot place order: ${error.message}`);
      res.status(422).send(error);
    }
  }
);

// Get all orders
router.route("/").get((req, res) => {
  CustomerOrder.find()
    .then((orders) => {
      logger.info("Fetched all orders");
      res.json(orders);
    })
    .catch((err) => {
      logger.error(`Error fetching orders: ${err.message}`);
      res
        .status(500)
        .send({ status: "Error with fetching orders", error: err.message });
    });
});

router
  .route("/update/:id")
  .put(
    [
      param("id").trim().escape(),
      body("email").trim().escape(),
      body("ProductName").trim().escape(),
      body("Price").trim().escape(),
      body("contact").trim().escape(),
      body("address").trim().escape(),
      body("status").trim().escape(),
    ],
    async (req, res) => {
      let orderId = req.params.id;
      const { email, fname, product, total, contact, address, status } =
        req.body;

      if (!email || !ProductName || !Price || !contact || !address) {
        return res.status(400).json({ message: "All fields are required" });
      }

      if (!/^\S+@\S+\.\S+$/.test(email)) {
        return res.status(400).json({ message: "Invalid email format" });
      }

      if (isNaN(Price) || Price <= 0) {
        return res.status(400).json({ message: "Invalid price" });
      }

      if (isNaN(contact) || contact.toString().length !== 10) {
        return res.status(400).json({ message: "Invalid contact number" });
      }

      // const updateOrder = {
      //   email,
      //   fname,
      //   product,
      //   total,
      //   contact,
      //   address,
      //   status,
      // };

      // const update = await CustomerOrder.findByIdAndUpdate(orderId, updateOrder)
      //   .then(() => {
      //     res.status(200).send({ status: "Order Updated", Order: update });
      //   })
      //   .catch((err) => {
      //     console.log(err);
      //     res
      //       .status(500)
      //       .send({ status: "Error with updating data", error: err.message });
      //   });

      try {
        const updateOrder = {
          email,
          ProductName,
          Price,
          contact,
          address,
          status,
        };

        const updatedOrder = await CustomerOrder.findByIdAndUpdate(
          orderId,
          updateOrder,
          { new: true }
        );
        if (!updatedOrder) {
          return res.status(404).send({ message: "Order not found" });
        }
        logger.info(`Order updated successfully: ${updatedOrder}`);

        res.status(200).send({ status: "Order Updated", Order: updatedOrder });
      } catch (err) {
        logger.error(`Error updating order: ${err.message}`);
        res
          .status(500)
          .send({ status: "Error with updating order", error: err.message });
      }
    }
  );
router
  .route("/delete/:id")
  .delete([param("id").trim().escape()], async (req, res) => {
    let orderId = req.params.id;

    // await order
    //   .findByIdAndDelete(orderId)
    //   .then(() => {
    //     res.status(200).send({ status: "User Deleted" });
    //   })
    //   .catch((err) => {
    //     console.log(err.message);
    //     res
    //       .status(500)
    //       .send({ status: "Error with delete order", error: err.message });
    //   });

    try {
      const deletedOrder = await CustomerOrder.findByIdAndDelete(orderId);
      if (!deletedOrder) {
        return res.status(404).send({ message: "Order not found" });
      }
      logger.info(`Order deleted successfully: ${orderId}`);

      res.status(200).send({ status: "Order Deleted" });
    } catch (err) {
      logger.error(`Error deleting order: ${err.message}`);
      res
        .status(500)
        .send({ status: "Error with deleting order", error: err.message });
    }
  });

router
  .route("/get/:id")
  .get([param("id").trim().escape()], async (req, res) => {
    let orderId = req.params.id;
    // const Order = await CustomerOrder.findById(orderId)
    //   .then(() => {
    //     res.status(200).send({ status: "User Fetched", Order: CustomerOrder });
    //   })
    //   .catch(() => {
    //     console.log(err.message);
    //     res
    //       .status(500)
    //       .send({ status: "Error with get order", error: err.message });
    //   });

    try {
      const order = await CustomerOrder.findById(orderId);
      if (!order) {
        return res.status(404).send({ status: "Order Not Found" });
      }
      logger.info(`Order fetched successfully: ${order}`);

      res.status(200).send({ status: "Order Fetched", Order: order });
    } catch (err) {
      logger.error(`Error fetching order: ${err.message}`);
      res
        .status(500)
        .send({ status: "Error with fetching order", error: err.message });
    }
  });
module.exports = router;
